% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cosine.R
\name{multi_connection_table}
\alias{multi_connection_table}
\alias{cf_cosine_plot}
\title{Multi dataset cosine clustering}
\usage{
multi_connection_table(
  ids,
  partners = c("inputs", "outputs"),
  threshold = 1L,
  group = "type"
)

cf_cosine_plot(
  ids = NULL,
  ...,
  threshold = 5,
  partners = c("outputs", "inputs"),
  labRow = "{type}_{coconatfly::abbreviate_datasets(dataset)}{side}",
  group = "type",
  heatmap = TRUE,
  interactive = FALSE,
  drop_dataset_prefix = FALSE,
  nas = c("zero", "drop"),
  method = c("ward.D", "single", "complete", "average", "mcquitty", "median", "centroid",
    "ward.D2")
)
}
\arguments{
\item{ids}{Either a set of ids \emph{OR} a}

\item{partners}{Whether to return inputs or outputs}

\item{threshold}{return only edges with at least this many matches. 0 is an
option since neuprint sometimes returns 0 weight edges.}

\item{group}{The name or the grouping column for partner connectivity
(defaults to \code{"type"}) or a logical where \code{group=FALSE} means no
grouping (see details).}

\item{...}{Additional arguments passed to \code{\link{heatmap}}}

\item{labRow}{A vector defining the row labels. If it is a character vector
length 1 containing any curly braces it will be interpreted as a
\code{\link{glue}} string for interpolation, using the data.frame returned
by \code{\link[neuprintr]{neuprint_get_meta}} as a source of information.}

\item{heatmap}{A logical indicating whether or not to plot the heatmap
\emph{OR} a function to plot the heatmap whose argument names are
compatible with \code{stats::\link{heatmap}}. \code{gplots::heatmap.2} is a
good example. Defaults to \code{TRUE} therefore plotting the full heatmap
with \code{stats::\link{heatmap}}.}

\item{interactive}{Whether to plot an interactive heatmap (allowing zooming
and id selection). See details.}

\item{drop_dataset_prefix}{Whether to remove dataset prefix such as
\code{hb:} or \code{fw:} from dendrograms. This is useful when reviewing
neurons in interactive mode.}

\item{nas}{What to do with entries that have NAs. Default is to set them to 0
similarity.}

\item{method}{The cluster method to use (see \code{\link{hclust}})}
}
\value{
\code{multi_connection_table} returns a connectivity dataframe as
  returned by \code{cf_partners} but with an additional column
  \code{partners} which indicates (for each row) whether the partner neurons
  are the input or output neurons.

The result of \code{\link{heatmap}} invisibly including the row and
  column dendrograms or when \code{heatmap=FALSE}, an \code{\link{hclust}}
  dendrogram
}
\description{
Multi dataset cosine clustering
}
\details{
\code{group=FALSE} only makes sense for single dataset clustering -
  type labels are essential for linking connectivity across datasets. However
  \code{group=FALSE} can be useful e.g. for co-clustering columnar elements
  in the visual system that have closely related partners usually because
  they are in neighbouring columns. At the time of writing, there is no
  metadata support in FANC so \code{group=FALSE} is the only option there.

  \code{group} can be set to other metadata columns such as \code{class} or
  \code{hemilineage}, \code{serial} (serially homologous cell group) if
  available. This can reveal other interesting features of organisation.
}
\examples{
\donttest{
# basic cosine clustering, in this case for one dataset
cf_cosine_plot(cf_ids(hemibrain="/type:LAL00.+"))

# same but dropping the dataset prefix in the column labels
cf_cosine_plot(cf_ids(hemibrain="/type:LAL00.+"),
  drop_dataset_prefix = TRUE)

# only cluster by inputs
cf_cosine_plot(cf_ids(hemibrain="/type:LAL00.+"), partners='in')

# or outputs
cf_cosine_plot(cf_ids(hemibrain="/type:LAL00.+"), partners='in')

# the same but without grouping partner connectivity by type
# only makes sense for single dataset plots
cf_cosine_plot(cf_ids(hemibrain="/type:LAL00.+"), group = FALSE)

# bigger clustering
lalhc=cf_cosine_plot(cf_ids(hemibrain="/type:LAL.+"), heatmap=FALSE)
lalmeta=cf_meta(lalhc$labels)
lalmeta=coconat::add_cluster_info(lalmeta, lalhc, h=0.75, idcol='key')

}
\dontrun{
## The previous examples are for single datasets to avoid authentication issues
## on the build server, but similar queries could be run for multiple datasets
cf_cosine_plot(cf_ids(flywire="/type:LAL.+", malecns="/type:LAL.+"))

cf_cosine_plot(cf_ids("/type:LAL.+", datasets='brain'))
# same as since the default is brain
cf_cosine_plot(cf_ids("/type:LAL.+"))

# just make the hclust dendrogram
lalhc=cf_cosine_plot(cf_ids("/type:LAL.+"), heatmap=FALSE)
lalmeta=cf_meta(lalhc$labels)
lalmeta=coconat::add_cluster_info(lalmeta, lalhc, h=0.75)

# look at the results interactively
cf_cosine_plot(cf_ids("/type:LAL.+"), interactive=TRUE)
}

\donttest{
# Show case examples of using multi_connection_table to allow
# only a subset of partnets to be used for typing
mct=multi_connection_table(cf_ids(hemibrain="/lLN2.+"), partners='in')
cf_cosine_plot(mct)
library(dplyr)
mct2=mct \%>\% filter(!grepl("PN",type))
cf_cosine_plot(mct2)

mct3=cf_ids("/type:lLN2.+", datasets=c("hemibrain", "flywire")) \%>\%
  multi_connection_table(., partners='in') \%>\%
  mutate(class=case_when(
   grepl("LN", type) ~ "LN",
   grepl("RN", type) ~ "RN",
   grepl("^M.*PN", type) ~ 'mPN',
   grepl("PN", type) ~ 'uPN',
   T ~ 'other'
  )) \%>\%
  # try merging connectivity for partners that don't have much specificity
  mutate(type=case_when(
  class=="RN" ~ sub("_.+", "", type),
  class=="uPN" ~ 'uPN',
  T ~ type
  ))
\dontrun{
mct3\%>\%
  # remove RN/uPN connectivity could also use the merged connectivity
  filter(!class \%in\% c("RN", "uPN")) \%>\%
  cf_cosine_plot(interactive=TRUE)
}

# This time focus in on a small number of query neurons
mct3 \%>\%
  mutate(query_key=ifelse(partners=='outputs', pre_key, post_key)) \%>\%
  filter(query_key \%in\% cf_ids('/type:lLN2(T_[bde]|X08)', datasets = c("hemibrain", "flywire"), keys = T)) \%>\%
  cf_cosine_plot()
}

# another worked example lLN1 neurons
\donttest{
lLN1=cf_ids("/type:lLN1_.+", datasets=c("hemibrain", "flywire")) \%>\%
  multi_connection_table(., partners='in') \%>\%
  mutate(class=case_when(
   grepl("LN", type) ~ "LN",
   grepl("RN", type) ~ "RN",
   grepl("^M.*PN", type) ~ 'mPN',
   grepl("PN", type) ~ 'uPN',
   T ~ 'other'
  )) \%>\%
  mutate(type=case_when(
  class=="RN" ~ sub("_.+", "", type),
  class=="uPN" ~ 'uPN',
  T ~ type
  ))

lLN1 \%>\%
  filter(!class \%in\% c("RN", "uPN")) \%>\%
  cf_cosine_plot()
}
}
