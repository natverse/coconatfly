% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/partners.R
\name{cf_partner_summary}
\alias{cf_partner_summary}
\title{Summarise the connectivity of a set of neurons grouping by type}
\usage{
cf_partner_summary(
  ids,
  threshold = 1L,
  partners = c("inputs", "outputs"),
  aggregate.query = TRUE,
  normalise = FALSE,
  group = "type",
  rval = c("data.frame", "sparse", "matrix"),
  MoreArgs = list()
)
}
\arguments{
\item{ids}{A list of ids named by the relevant datasets (see examples) or any
other input that can be processed by the \code{\link{keys}} function
(including a \code{hclust} dendrogram object.)}

\item{threshold}{return only edges with at least this many matches. 0 is an
option since neuprint sometimes returns 0 weight edges.}

\item{partners}{Whether to return inputs or outputs}

\item{aggregate.query}{Whether to aggregate all query neurons of the same
type (the default) or when \code{aggregate.query=FALSE} only to aggregate
the partner neurons.}

\item{normalise}{Whether to normalise the reported weights as a fraction of
the total for each query cell type (or individual query neuron when
\code{aggregate.query=TRUE}).}

\item{group}{Name of the column to use for grouping. Defaults to type but
other options could be useful e.g. class or group.}

\item{rval}{Choose what the function will return. \code{sparse} and
\code{matrix} return sparse and dense (standard) matrices, respectively.}

\item{MoreArgs}{Additional arguments in the form of a hierarchical list
(expert use; see details and examples).}
}
\value{
a data.frame or (sparse) matrix based on \code{rval}. The column
  \code{n} refers to the number of \emph{partner} neurons.
}
\description{
Summarise the connectivity of a set of neurons grouping by type
}
\details{
This function currently groups by dataset, and pre and postsynaptic
  type. It does not currently group by side. The forms returning matrices
  rely on \code{coconat::\link{partner_summary2adjacency_matrix}}.
}
\examples{
\dontrun{
lal78in=cf_partner_summary(cf_ids("/type:LAL00[78]"), threshold=10, partners='in')
lal78in
lal78in \%>\%
  tidyr::pivot_wider(id_cols = c(type.pre,dataset),
    names_from = type.post, values_from = weight, values_fill = 0)
lal78in \%>\%
  tidyr::pivot_wider(id_cols = c(type.pre),
    names_from = c(type.post,dataset), values_from = weight, values_fill = 0)
}
}
