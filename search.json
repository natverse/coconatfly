[{"path":"https://flyconnectome.github.io/coconatfly/articles/TuTu.html","id":"tutua","dir":"Articles","previous_headings":"","what":"TuTuA","title":"TuTu","text":"However, interestingly can also see TuTuA group splits strongly flywire two groups evident hemibrain. strongly suggests property bilateral connectivity defines difference. can try seeing just use input connectivity cluster things resolve:  Hmm situation still . Since two flywire groups well-separated almost certainly real split. However since hemibrain give data support , record split now. strongly suspect observe split future connectomes though.","code":"tutus %>%    filter(grepl(\"TuTuA\", type)) %>%    cf_cosine_plot(partners = 'in') #> Matching types across datasets. Dropping 891/1709 input partner types with total weight 18272/35561"},{"path":"https://flyconnectome.github.io/coconatfly/articles/TuTu.html","id":"setting-the-new-types","dir":"Articles","previous_headings":"","what":"Setting the new types","title":"TuTu","text":"Group 4 contains TuTuB_b neurons Group 5 contains TuTuB_b neurons following code help find ontology (FBBt) ids neurons:","code":"tutus.hc <- tutus %>%    cf_cosine_plot(heatmap = F) #> Matching types across datasets. Dropping 1409/1922 output partner types with total weight 23919/34391 #> Matching types across datasets. Dropping 1531/2370 input partner types with total weight 26109/43977 #> Warning in Matrix::cov2cor(cpx): diag(.) had 0 or NA entries; non-finite result #> is doubtful tutus.meta=cf_meta(tutus.hc$labels)  plot(tutus.hc, labels = tutus.meta$type) tutus.meta2=coconat::add_cluster_info(tutus.meta, tutus.hc, k = 5) #> Warning in coconat::add_cluster_info(tutus.meta, tutus.hc, k = 5): Multiple standard id columns are present in tutus.meta #> Choosing key tutus.meta2 %>%    count(dataset, group_k5) #>     dataset group_k5 n #> 1   flywire        2 2 #> 2   flywire        3 2 #> 3   flywire        4 2 #> 4   flywire        5 2 #> 5 hemibrain        1 4 #> 6 hemibrain        4 2 #> 7 hemibrain        5 1 tutus.meta2 %>%    filter(group_k5==4) #>                   id side   class    type group         instance   dataset #> 1 720575940635979000    L central   TuTuB  <NA>          TuTuB_L   flywire #> 2 720575940637997427    R central   TuTuB  <NA>          TuTuB_R   flywire #> 3          987759904    L    <NA> TuTuB_b  <NA> TuTuB_b(ADL19)_L hemibrain #> 4          769544445    R    <NA> TuTuB_b  <NA>        TuTuB_b_R hemibrain #>                     key dendid group_k5 #> 1 fw:720575940635979000     11        4 #> 2 fw:720575940637997427     12        4 #> 3          hb:987759904      9        4 #> 4          hb:769544445     10        4 tutus.meta2 %>%    filter(group_k5==5) #>                   id side   class    type group  instance   dataset #> 1 720575940633550431    R central   TuTuB  <NA>   TuTuB_R   flywire #> 2 720575940623326868    L central   TuTuB  <NA>   TuTuB_L   flywire #> 3         5813014028    R    <NA> TuTuB_a  <NA> TuTuB_a_R hemibrain #>                     key dendid group_k5 #> 1 fw:720575940633550431     14        5 #> 2 fw:720575940623326868     15        5 #> 3         hb:5813014028     13        5 natmanager::install(pkgs = 'vfbr') vfbr::vfb_autocomplete_query('TuTuB') %>%    filter(grepl(\"FBbt\", short_form))"},{"path":"https://flyconnectome.github.io/coconatfly/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gregory Jefferis. Author, maintainer.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jefferis G (2023). coconatfly: Comparative Connectomics Public Progress Drosophila Datasets. https://github.com/flyconnectome/coconatfly, https://flyconnectome.github.io/coconatfly/.","code":"@Manual{,   title = {coconatfly: Comparative Connectomics of Public and In Progress Drosophila Datasets},   author = {Gregory Jefferis},   year = {2023},   note = {https://github.com/flyconnectome/coconatfly, https://flyconnectome.github.io/coconatfly/}, }"},{"path":"https://flyconnectome.github.io/coconatfly/index.html","id":"coconatfly","dir":"","previous_headings":"","what":"Comparative Connectomics of Public and In Progress Drosophila Datasets","title":"Comparative Connectomics of Public and In Progress Drosophila Datasets","text":"coconatfly enables comparative/integrative connectomics across Drosophila datasets. philosophy provide access important functions connectome analysis way convenient uniform across Drosophila datasets. package builds upon coconat package provides basic /dataset agnostic functionality. case wondering, coconat stands COmparative COnnectomics NATverse coconatfly enables specifically fly datasets. Although code already active use, especially comparison hemibrain flywire datasets, remains experimental. Therefore interface yet relied upon. particular, quite likely refactoring abstract functionality coconat time goes order enable core functionality reused.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/index.html","id":"datasets","dir":"","previous_headings":"","what":"Datasets","title":"Comparative Connectomics of Public and In Progress Drosophila Datasets","text":"present following datasets supported (dataset names used package brackets): Janelia hemibrain (hemibrain) Female Adult Fly Brain - FlyWire connectome (flywire) Janelia male Ventral Nerve Cord (manc) Wei Lee, John Tuthill colleagues Female Adult Nerve Cord (fanc) Janelia Male CNS (malecns) first four datasets either public (hemibrain, manc) access can requested subject agreeing certain terms use (flywire, fanc). Male CNS dataset currently early stages proofreading annotation collaboration FlyEM Cambridge Drosophila Connectomics Group. Release anticipated early 2024.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Comparative Connectomics of Public and In Progress Drosophila Datasets","text":"can install development version coconatfly like : datasets exposed coconatfly require authentication access still annotated private pre-release. Please consult individual package dependencies authentication details surprised access datasets time. installation private packages (currently restricted male cns dataset developed collaborators FlyEM Team Janelia) need GITHUB_PAT (Personal Access Token - alternative username+password). code checks PAT GITHUB_PAT offers make one necessary.","code":"install.packages('natmanager') natmanager::install(pkgs = 'flyconnectome/coconatfly') natmanager::check_pat()"},{"path":"https://flyconnectome.github.io/coconatfly/index.html","id":"an-example","dir":"","previous_headings":"","what":"An example","title":"Comparative Connectomics of Public and In Progress Drosophila Datasets","text":"First let’s load libraries need Two important functions cf_ids() allows specify set neurons one datasets cf_meta() fetches information cell type. example let’s fetch information DA1 projection neurons: can also multiple brain datasets can also fetch connectivity neurons: Let’s restrict types observed datasets. counting many distinct datasets exist type results. data organised like , can easily compare connection strengths cell types across hemispheres:  … across datasets:","code":"library(coconatfly) library(dplyr) cf_meta(cf_ids('DA1_lPN', datasets = 'hemibrain')) #>           id pre post upstream downstream status    statusLabel     voxels #> 1 1734350788 621 2084     2084       4903 Traced Roughly traced 1174705998 #> 2 1734350908 725 2317     2317       5846 Traced Roughly traced 1382228240 #> 3 1765040289 702 2398     2398       5521 Traced Roughly traced 1380855164 #> 4 5813039315 691 2263     2263       5577 Traced Roughly traced 1016515847 #> 5  722817260 701 2435     2435       5635 Traced Roughly traced 1104413432 #> 6  754534424 646 2364     2364       5309 Traced Roughly traced 1265805547 #> 7  754538881 623 2320     2320       4867 Traced Roughly traced 1217284590 #>   cropped  instance    type cellBodyFiber notes  soma side class group #> 1   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #> 2   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #> 3   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #> 4   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA> FALSE    R  <NA>  <NA> #> 5   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA> FALSE    R  <NA>  <NA> #> 6   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #> 7   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #>     dataset #> 1 hemibrain #> 2 hemibrain #> 3 hemibrain #> 4 hemibrain #> 5 hemibrain #> 6 hemibrain #> 7 hemibrain da1meta <- cf_meta(cf_ids('DA1_lPN', datasets = c('hemibrain', 'flywire'))) #> Updating 2721 ids #> flywire_rootid_cached: Looking up 2721 missing keys #> Updating 12133 ids #> flywire_rootid_cached: Looking up 12132 missing keys head(da1meta) #>           id  instance    type side class group   dataset #> 1 1734350788 DA1_lPN_R DA1_lPN    R  <NA>  <NA> hemibrain #> 2 1734350908 DA1_lPN_R DA1_lPN    R  <NA>  <NA> hemibrain #> 3 1765040289 DA1_lPN_R DA1_lPN    R  <NA>  <NA> hemibrain #> 4 5813039315 DA1_lPN_R DA1_lPN    R  <NA>  <NA> hemibrain #> 5  722817260 DA1_lPN_R DA1_lPN    R  <NA>  <NA> hemibrain #> 6  754534424 DA1_lPN_R DA1_lPN    R  <NA>  <NA> hemibrain da1meta %>%    count(dataset, side) #>     dataset side n #> 1   flywire    L 8 #> 2   flywire    R 7 #> 3 hemibrain    R 7 da1ds <- da1meta %>%    cf_partners(threshold = 5, partners = 'output') #> Updating 2721 ids #> Updating 12133 ids head(da1ds) #> # A tibble: 6 × 8 #>    pre_id post_id weight side  type    dataset pre_key               post_key    #>   <int64> <int64>  <int> <chr> <chr>   <chr>   <chr>                 <chr>       #> 1    7e17    7e17     64 L     DA1_vPN flywire fw:720575940605102694 fw:7205759… #> 2    7e17    7e17     50 L     <NA>    flywire fw:720575940603231916 fw:7205759… #> 3    7e17    7e17     49 R     <NA>    flywire fw:720575940604407468 fw:7205759… #> 4    7e17    7e17     48 R     DA1_vPN flywire fw:720575940623303108 fw:7205759… #> 5    7e17    7e17     46 L     v2LN30  flywire fw:720575940603231916 fw:7205759… #> 6    7e17    7e17     42 L     DA1_vPN flywire fw:720575940603231916 fw:7205759… da1ds %>%    group_by(type, dataset, side) %>%    summarise(weight=sum(weight), npre=n_distinct(pre_id), npost=n_distinct(post_id)) #> `summarise()` has grouped output by 'type', 'dataset'. You can override using #> the `.groups` argument. #> # A tibble: 241 × 6 #> # Groups:   type, dataset [197] #>    type            dataset   side  weight  npre npost #>    <chr>           <chr>     <chr>  <int> <int> <int> #>  1 AL-AST1         flywire   L         16     2     1 #>  2 AL-AST1         flywire   R         13     2     1 #>  3 AL-AST1         hemibrain R         25     3     1 #>  4 APL             flywire   L         28     4     1 #>  5 APL             flywire   R         70     6     1 #>  6 APL             hemibrain R        113     6     1 #>  7 AVLP010         flywire   L          6     1     1 #>  8 AVLP010         flywire   R         83     6     1 #>  9 AVLP011,AVLP012 flywire   L          6     1     1 #> 10 AVLP011,AVLP012 flywire   R         22     2     1 #> # ℹ 231 more rows da1ds.shared_types.wide <- da1ds %>%    filter(!(dataset=='hemibrain' & side=='L')) %>% # drop truncated hemibrain LHS    group_by(type) %>%    mutate(datasets_type=n_distinct(dataset)) %>%    filter(datasets_type>1) %>%    group_by(type, dataset, side) %>%    summarise(weight=sum(weight)) %>%    mutate(shortdataset=abbreviate_datasets(dataset)) %>%    tidyr::pivot_wider(id_cols = type, names_from = c(shortdataset,side),                       values_from = weight, values_fill = 0) #> `summarise()` has grouped output by 'type', 'dataset'. You can override using #> the `.groups` argument. da1ds.shared_types.wide #> # A tibble: 34 × 4 #> # Groups:   type [34] #>    type      fw_L  fw_R  hb_R #>    <chr>    <int> <int> <int> #>  1 AL-AST1     16    13    25 #>  2 APL         28    70   113 #>  3 DA1_lPN     45     6    73 #>  4 DA1_vPN    250   254   333 #>  5 DNb05        6     0     5 #>  6 KCg-m     3275  2545  3030 #>  7 LHAD1g1     62    60    48 #>  8 LHAV2b11    44    77    29 #>  9 LHAV3k6     19    16     5 #> 10 LHAV4c2      0     7    15 #> # ℹ 24 more rows library(ggplot2) da1ds.shared_types.wide %>%    filter(type!='KCg-m') %>%    ggplot(data=., aes(fw_L, fw_R)) +   geom_point() +   stat_smooth(method = \"lm\", formula = y ~ x + 0) +   geom_abline(slope=1, linetype='dashed') da1ds.shared_types.wide %>%    filter(type!='KCg-m') %>%    ggplot(data=., aes(fw_R, hb_R)) +   geom_point() +   stat_smooth(method = \"lm\", formula = y ~ x + 0) +   geom_abline(slope=1, linetype='dashed')"},{"path":"https://flyconnectome.github.io/coconatfly/index.html","id":"across-dataset-connectivity-clustering","dir":"","previous_headings":"","what":"Across dataset connectivity clustering","title":"Comparative Connectomics of Public and In Progress Drosophila Datasets","text":"able fetch shared connectivity uniform format building block range analyses. example, can compare connectivity set neurons believed constitute cell type across multiple datasets. Cosine similarity clustering seems work well purpose.  row (column) correspond single neuron. Rows labelled cell type, dataset hemisphere; due truncation hemibrain neurons sometimes exist one hemisphere, sometimes . Notice LAL009 LAL010 neurons hemisphere co-cluster together exactly expect cell type conserved across brains. contrast LAL008 LAL042 intermingled; believe constitute single cell type two cells / hemisphere (.e. split two cell types hemibrain). can also see cells one hemibrain hemisphere often cluster slightly oddly (e.g. 387687146) - likely due truncation axons dendrites cells paucity partners left hand side hemibrain.","code":"cf_cosine_plot(cf_ids('/type:LAL0(08|09|10|42)', datasets = c(\"flywire\", \"hemibrain\"))) #> Updating 2721 ids #> Updating 12133 ids #> Matching types across datasets. Dropping 469/976 output partner types with total weight 8510/23730 #> Matching types across datasets. Dropping 750/1358 input partner types with total weight 11133/26809"},{"path":"https://flyconnectome.github.io/coconatfly/reference/abbreviate_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Abbreviate fly connectomics dataset names — abbreviate_datasets","title":"Abbreviate fly connectomics dataset names — abbreviate_datasets","text":"Abbreviate fly connectomics dataset names","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/abbreviate_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abbreviate fly connectomics dataset names — abbreviate_datasets","text":"","code":"abbreviate_datasets(ds)"},{"path":"https://flyconnectome.github.io/coconatfly/reference/abbreviate_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abbreviate fly connectomics dataset names — abbreviate_datasets","text":"ds One dataset long names","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/abbreviate_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Abbreviate fly connectomics dataset names — abbreviate_datasets","text":"character vector 2 letter abbreviations","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/abbreviate_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Abbreviate fly connectomics dataset names — abbreviate_datasets","text":"","code":"abbreviate_datasets(c(\"flywire\", \"flywire\", \"hemibrain\")) #> [1] \"fw\" \"fw\" \"hb\""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi dataset cosine clustering — multi_connection_table","title":"Multi dataset cosine clustering — multi_connection_table","text":"Multi dataset cosine clustering","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi dataset cosine clustering — multi_connection_table","text":"","code":"multi_connection_table(   ids,   partners = c(\"inputs\", \"outputs\"),   threshold = 1L,   group = \"type\" )  cf_cosine_plot(   ids = NULL,   ...,   threshold = 5,   partners = c(\"outputs\", \"inputs\"),   labRow = \"{type}_{coconatfly::abbreviate_datasets(dataset)}{side}\",   group = \"type\",   heatmap = TRUE,   interactive = FALSE,   drop_dataset_prefix = FALSE,   nas = c(\"zero\", \"drop\"),   method = c(\"ward.D\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\", \"centroid\",     \"ward.D2\") )"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi dataset cosine clustering — multi_connection_table","text":"ids Either set ids partners Whether return inputs outputs threshold return edges least many matches. 0 option since neuprint sometimes returns 0 weight edges. group name grouping column partner connectivity (defaults \"type\") logical group=FALSE means grouping (see details). ... Additional arguments passed heatmap labRow vector defining row labels. character vector length 1 containing curly braces interpreted glue string interpolation, using data.frame returned neuprint_get_meta source information. heatmap logical indicating whether plot heatmap function plot heatmap whose argument names compatible stats::heatmap. gplots::heatmap.2 good example. Defaults TRUE therefore plotting full heatmap stats::heatmap. interactive Whether plot interactive heatmap (allowing zooming id selection). See details. drop_dataset_prefix Whether remove dataset prefix hb: fw: dendrograms. useful reviewing neurons interactive mode. nas entries NAs. Default set 0 similarity. method cluster method use (see hclust)","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi dataset cosine clustering — multi_connection_table","text":"multi_connection_table returns connectivity dataframe   returned cf_partners additional column  partners indicates (row) whether partner neurons   input output neurons. result heatmap invisibly including row   column dendrograms heatmap=FALSE, hclust dendrogram","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multi dataset cosine clustering — multi_connection_table","text":"group=FALSE makes sense single dataset clustering -   type labels essential linking connectivity across datasets. However   group=FALSE can useful e.g. co-clustering columnar elements   visual system closely related partners usually   neighbouring columns. time writing,   metadata support FANC group=FALSE option . group can set metadata columns class   hemilineage, serial (serially homologous cell group)   available. can reveal interesting features organisation.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multi dataset cosine clustering — multi_connection_table","text":"","code":"# \\donttest{ # basic cosine clustering, in this case for one dataset cf_cosine_plot(cf_ids(hemibrain=\"/type:LAL00.+\")) #> Matching types across datasets. Dropping 0/748 output partner types with total weight 0/15291 #> Matching types across datasets. Dropping 0/690 input partner types with total weight 0/11078   # same but dropping the dataset prefix in the column labels cf_cosine_plot(cf_ids(hemibrain=\"/type:LAL00.+\"),   drop_dataset_prefix = TRUE) #> Matching types across datasets. Dropping 0/748 output partner types with total weight 0/15291 #> Matching types across datasets. Dropping 0/690 input partner types with total weight 0/11078   # only cluster by inputs cf_cosine_plot(cf_ids(hemibrain=\"/type:LAL00.+\"), partners='in') #> Matching types across datasets. Dropping 0/690 input partner types with total weight 0/11078   # or outputs cf_cosine_plot(cf_ids(hemibrain=\"/type:LAL00.+\"), partners='in') #> Matching types across datasets. Dropping 0/690 input partner types with total weight 0/11078  # the same but without grouping partner connectivity by type # only makes sense for single dataset plots cf_cosine_plot(cf_ids(hemibrain=\"/type:LAL00.+\"), group = FALSE)   # bigger clustering lalhc=cf_cosine_plot(cf_ids(hemibrain=\"/type:LAL.+\"), heatmap=FALSE) #> Matching types across datasets. Dropping 0/17386 output partner types with total weight 0/331470 #> Matching types across datasets. Dropping 0/23297 input partner types with total weight 0/435509 #> Warning: diag(.) had 0 or NA entries; non-finite result is doubtful lalmeta=cf_meta(lalhc$labels) lalmeta=coconat::add_cluster_info(lalmeta, lalhc, h=0.75, idcol='key')  # } if (FALSE) { ## The previous examples are for single datasets to avoid authentication issues ## on the build server, but similar queries could be run for multiple datasets cf_cosine_plot(cf_ids(flywire=\"/type:LAL.+\", malecns=\"/type:LAL.+\"))  cf_cosine_plot(cf_ids(\"/type:LAL.+\", datasets='brain')) # same as since the default is brain cf_cosine_plot(cf_ids(\"/type:LAL.+\"))  # just make the hclust dendrogram lalhc=cf_cosine_plot(cf_ids(\"/type:LAL.+\"), heatmap=FALSE) lalmeta=cf_meta(lalhc$labels) lalmeta=coconat::add_cluster_info(lalmeta, lalhc, h=0.75)  # look at the results interactively cf_cosine_plot(cf_ids(\"/type:LAL.+\"), interactive=TRUE) }  # \\donttest{ # Show case examples of using multi_connection_table to allow # only a subset of partnets to be used for typing mct=multi_connection_table(cf_ids(hemibrain=\"/lLN2.+\"), partners='in') #> Matching types across datasets. Dropping 0/63218 input partner types with total weight 0/412813 cf_cosine_plot(mct)  library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:nat’: #>  #>     intersect, setdiff, union #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union mct2=mct %>% filter(!grepl(\"PN\",type)) cf_cosine_plot(mct2)   mct3=cf_ids(\"/type:lLN2.+\", datasets=c(\"hemibrain\", \"flywire\")) %>%   multi_connection_table(., partners='in') %>%   mutate(class=case_when(    grepl(\"LN\", type) ~ \"LN\",    grepl(\"RN\", type) ~ \"RN\",    grepl(\"^M.*PN\", type) ~ 'mPN',    grepl(\"PN\", type) ~ 'uPN',    T ~ 'other'   )) %>%   # try merging connectivity for partners that don't have much specificity   mutate(type=case_when(   class==\"RN\" ~ sub(\"_.+\", \"\", type),   class==\"uPN\" ~ 'uPN',   T ~ type   )) #> Loading required namespace: git2r #> Matching types across datasets. Dropping 24046/107302 input partner types with total weight 229272/837619 if (FALSE) { mct3%>%   # remove RN/uPN connectivity could also use the merged connectivity   filter(!class %in% c(\"RN\", \"uPN\")) %>%   cf_cosine_plot(interactive=TRUE) }  # This time focus in on a small number of query neurons mct3 %>%   mutate(query_key=ifelse(partners=='outputs', pre_key, post_key)) %>%   filter(query_key %in% cf_ids('/type:lLN2(T_[bde]|X08)', datasets = c(\"hemibrain\", \"flywire\"), keys = T)) %>%   cf_cosine_plot()  # }  # another worked example lLN1 neurons # \\donttest{ lLN1=cf_ids(\"/type:lLN1_.+\", datasets=c(\"hemibrain\", \"flywire\")) %>%   multi_connection_table(., partners='in') %>%   mutate(class=case_when(    grepl(\"LN\", type) ~ \"LN\",    grepl(\"RN\", type) ~ \"RN\",    grepl(\"^M.*PN\", type) ~ 'mPN',    grepl(\"PN\", type) ~ 'uPN',    T ~ 'other'   )) %>%   mutate(type=case_when(   class==\"RN\" ~ sub(\"_.+\", \"\", type),   class==\"uPN\" ~ 'uPN',   T ~ type   )) #> Matching types across datasets. Dropping 7305/17259 input partner types with total weight 128468/234385  lLN1 %>%   filter(!class %in% c(\"RN\", \"uPN\")) %>%   cf_cosine_plot()  # }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify ids for fly connectome datasets — cf_ids","title":"Specify ids for fly connectome datasets — cf_ids","text":"Specify ids fly connectome datasets","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify ids for fly connectome datasets — cf_ids","text":"","code":"cf_ids(   query = NULL,   datasets = c(\"brain\", \"vnc\", \"hemibrain\", \"flywire\", \"malecns\", \"manc\", \"fanc\"),   expand = FALSE,   keys = FALSE,   hemibrain = NULL,   flywire = NULL,   malecns = NULL,   manc = NULL,   fanc = NULL )  # S3 method for cidlist c(..., unique = TRUE)"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify ids for fly connectome datasets — cf_ids","text":"query query (e.g. cell type name regular expression) datasets Character vector naming datasets query applied. expand Whether expand queries matching ids (involve one calls corresponding servers). Default FALSE. keys Whether turn ids keys hb:12345 right away. Default FALSE may find useful e.g. combining lists neurons (see examples). hemibrain Pass hemibrain specific query ids argument flywire Pass flywire specific query ids argument malecns Pass malecns specific query ids argument manc Pass manc specific query ids argument fanc Pass fanc ids argument (present support metadata queries fanc) ... One lists generated cf_ids joined together unique Whether remove duplicated ids combining cf_id lists c.cidlist","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify ids for fly connectome datasets — cf_ids","text":"list ids additional class cidlist","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify ids for fly connectome datasets — cf_ids","text":"","code":"# \\donttest{ cf_ids(\"DA2_lPN\", datasets='brain') #> flywire [1 ids]: DA2_lPN #> hemibrain [1 ids]: DA2_lPN #> malecns [1 ids]: DA2_lPN # / introduces a regular expression cf_ids(\"/MBON.+\", datasets='brain') #> flywire [1 ids]: /MBON.+ #> hemibrain [1 ids]: /MBON.+ #> malecns [1 ids]: /MBON.+  # expand query into actual ids cf_ids(\"/type:MBON.+\", datasets='brain', expand=TRUE) #> Error in clio_auth() :  #>   Clio/Google auth failure. Do you have access rights to VNC clio? #> Try specifying the email linked to clio in a call to `clio_auth` or setting `options(malevnc.clio_email)`! #> Warning: Trouble choosing default malecns dataset. #> Try running dr_malecns() and then ask on #code or file an issue at #> https://github.com/flyconnectome/malecns/issues #> Warning: No valid ids in dataset:malecns #> flywire [96 ids]: 720575940624185095 720575940624117245 720575940638526278 720575940629585602 720575940637934308 720575940632118343 720575940631318031 720575940638163428 720575940630496374 720575940642142861 ... #> hemibrain [71 ids]: 612371421 673509195 424789697 5813022341 487925037 612738462 487925063 613079053 1386512867 799586652 ... #> malecns [0 ids]:   # return keys directly cf_ids(\"/type:MBON.+\", keys=TRUE) #> Warning: No valid ids in dataset:malecns #> fw:720575940624185095 #> fw:720575940624117245 #> fw:720575940638526278 #> fw:720575940629585602 #> fw:720575940637934308 #> fw:720575940632118343 #> fw:720575940631318031 #> fw:720575940638163428 #> fw:720575940630496374 #> fw:720575940642142861 #> fw:720575940632939181 #> fw:720575940611344078 #> fw:720575940634822751 #> fw:720575940617552340 #> fw:720575940624280328 #> fw:720575940617567206 #> fw:720575940643700640 #> fw:720575940614206866 #> fw:720575940614026193 #> fw:720575940621159094 #> fw:720575940623001480 #> fw:720575940608304220 #> fw:720575940614595218 #> fw:720575940636992368 #> fw:720575940627770628 #> fw:720575940637902938 #> fw:720575940638774606 #> fw:720575940639697827 #> fw:720575940626833021 #> fw:720575940618008859 #> fw:720575940635841143 #> fw:720575940618249797 #> fw:720575940628779563 #> fw:720575940623905719 #> fw:720575940629529722 #> fw:720575940624659943 #> fw:720575940624590316 #> fw:720575940645304430 #> fw:720575940612196850 #> fw:720575940630767959 #> fw:720575940635082347 #> fw:720575940628757547 #> fw:720575940627144069 #> fw:720575940610647416 #> fw:720575940622093436 #> fw:720575940622473548 #> fw:720575940626046154 #> fw:720575940647328900 #> fw:720575940650386553 #> fw:720575940639556467 #> fw:720575940612455338 #> fw:720575940617749538 #> fw:720575940617760257 #> fw:720575940634482783 #> fw:720575940644615716 #> fw:720575940626109315 #> fw:720575940623377802 #> fw:720575940626744921 #> fw:720575940624774548 #> fw:720575940622979277 #> fw:720575940614892182 #> fw:720575940626872094 #> fw:720575940643863496 #> fw:720575940630590572 #> fw:720575940606953858 #> fw:720575940630075703 #> fw:720575940652390134 #> fw:720575940632535756 #> fw:720575940643696288 #> fw:720575940623201833 #> fw:720575940635063135 #> fw:720575940616463477 #> fw:720575940629981440 #> fw:720575940623182847 #> fw:720575940626315010 #> fw:720575940632943277 #> fw:720575940624539284 #> fw:720575940620464321 #> fw:720575940628783363 #> fw:720575940607183026 #> fw:720575940614392999 #> fw:720575940617302365 #> fw:720575940622997453 #> fw:720575940624694503 #> fw:720575940617582822 #> fw:720575940610964946 #> fw:720575940607155890 #> fw:720575940623381956 #> fw:720575940630864847 #> fw:720575940638028607 #> fw:720575940621164720 #> fw:720575940623841463 #> fw:720575940631177803 #> fw:720575940624489964 #> fw:720575940609440324 #> fw:720575940623750325 #> hb:612371421 #> hb:673509195 #> hb:424789697 #> hb:5813022341 #> hb:487925037 #> hb:612738462 #> hb:487925063 #> hb:613079053 #> hb:1386512867 #> hb:799586652 #> hb:422725634 #> hb:5813061512 #> hb:1234386037 #> hb:611477605 #> hb:733036127 #> hb:920470959 #> hb:1016835041 #> hb:1048215779 #> hb:1078693835 #> hb:613719036 #> hb:672352543 #> hb:768555687 #> hb:424767514 #> hb:517518166 #> hb:704466265 #> hb:861665641 #> hb:1139667240 #> hb:300972942 #> hb:394225044 #> hb:5813067721 #> hb:5813068729 #> hb:642664141 #> hb:673702721 #> hb:457175171 #> hb:579916831 #> hb:673366098 #> hb:5812981264 #> hb:5812981543 #> hb:457196444 #> hb:5813020828 #> hb:423774471 #> hb:517854468 #> hb:792368888 #> hb:5813022896 #> hb:985813153 #> hb:5813042659 #> hb:985131499 #> hb:423382015 #> hb:487143497 #> hb:550081497 #> hb:612742248 #> hb:612422902 #> hb:912951014 #> hb:895441451 #> hb:5813061538 #> hb:5813117385 #> hb:457196643 #> hb:5813058048 #> hb:5813052909 #> hb:5813022234 #> hb:5813040205 #> hb:706948318 #> hb:894020730 #> hb:642732835 #> hb:643847447 #> hb:518670779 #> hb:547552266 #> hb:1173814525 #> hb:5813033000 #> hb:518930199 #> hb:611089775 # one way of combining separate lists of neurons hbids=c(264083994, 5813022274) c(cf_ids(\"/type:MBON1.+\", keys=TRUE), cf_ids(hemibrain = hbids, keys = TRUE)) #> Warning: No valid ids in dataset:malecns #>  [1] \"fw:720575940629585602\" \"fw:720575940632118343\" \"fw:720575940642142861\" #>  [4] \"fw:720575940634822751\" \"fw:720575940614206866\" \"fw:720575940614026193\" #>  [7] \"fw:720575940621159094\" \"fw:720575940623001480\" \"fw:720575940608304220\" #> [10] \"fw:720575940627770628\" \"fw:720575940638774606\" \"fw:720575940639697827\" #> [13] \"fw:720575940626833021\" \"fw:720575940635841143\" \"fw:720575940623905719\" #> [16] \"fw:720575940629529722\" \"fw:720575940645304430\" \"fw:720575940612196850\" #> [19] \"fw:720575940630767959\" \"fw:720575940635082347\" \"fw:720575940628757547\" #> [22] \"fw:720575940610647416\" \"fw:720575940622093436\" \"fw:720575940622473548\" #> [25] \"fw:720575940647328900\" \"fw:720575940650386553\" \"fw:720575940639556467\" #> [28] \"fw:720575940612455338\" \"fw:720575940617749538\" \"fw:720575940617760257\" #> [31] \"fw:720575940634482783\" \"fw:720575940626109315\" \"fw:720575940623377802\" #> [34] \"fw:720575940626744921\" \"fw:720575940630075703\" \"fw:720575940632535756\" #> [37] \"fw:720575940643696288\" \"fw:720575940623201833\" \"fw:720575940626315010\" #> [40] \"fw:720575940624539284\" \"fw:720575940622997453\" \"fw:720575940623841463\" #> [43] \"hb:613719036\"          \"hb:672352543\"          \"hb:768555687\"          #> [46] \"hb:424767514\"          \"hb:517518166\"          \"hb:704466265\"          #> [49] \"hb:861665641\"          \"hb:1139667240\"         \"hb:300972942\"          #> [52] \"hb:394225044\"          \"hb:5813067721\"         \"hb:5813068729\"         #> [55] \"hb:642664141\"          \"hb:673702721\"          \"hb:457175171\"          #> [58] \"hb:579916831\"          \"hb:673366098\"          \"hb:5812981264\"         #> [61] \"hb:5812981543\"         \"hb:457196444\"          \"hb:5813020828\"         #> [64] \"hb:423774471\"          \"hb:517854468\"          \"hb:264083994\"          #> [67] \"hb:5813022274\"          # now equivalent to keys(c(cf_ids(\"/type:MBON1.+\"), cf_ids(hemibrain = hbids))) #> Warning: No valid ids in dataset:malecns #> fw:720575940629585602 #> fw:720575940632118343 #> fw:720575940642142861 #> fw:720575940634822751 #> fw:720575940614206866 #> fw:720575940614026193 #> fw:720575940621159094 #> fw:720575940623001480 #> fw:720575940608304220 #> fw:720575940627770628 #> fw:720575940638774606 #> fw:720575940639697827 #> fw:720575940626833021 #> fw:720575940635841143 #> fw:720575940623905719 #> fw:720575940629529722 #> fw:720575940645304430 #> fw:720575940612196850 #> fw:720575940630767959 #> fw:720575940635082347 #> fw:720575940628757547 #> fw:720575940610647416 #> fw:720575940622093436 #> fw:720575940622473548 #> fw:720575940647328900 #> fw:720575940650386553 #> fw:720575940639556467 #> fw:720575940612455338 #> fw:720575940617749538 #> fw:720575940617760257 #> fw:720575940634482783 #> fw:720575940626109315 #> fw:720575940623377802 #> fw:720575940626744921 #> fw:720575940630075703 #> fw:720575940632535756 #> fw:720575940643696288 #> fw:720575940623201833 #> fw:720575940626315010 #> fw:720575940624539284 #> fw:720575940622997453 #> fw:720575940623841463 #> hb:613719036 #> hb:672352543 #> hb:768555687 #> hb:424767514 #> hb:517518166 #> hb:704466265 #> hb:861665641 #> hb:1139667240 #> hb:300972942 #> hb:394225044 #> hb:5813067721 #> hb:5813068729 #> hb:642664141 #> hb:673702721 #> hb:457175171 #> hb:579916831 #> hb:673366098 #> hb:5812981264 #> hb:5812981543 #> hb:457196444 #> hb:5813020828 #> hb:423774471 #> hb:517854468 #> hb:264083994 #> hb:5813022274 # } c(cf_ids(flywire = 1, hemibrain = 2), cf_ids(hemibrain = 1:2, flywire=1:2)) #> flywire [2 ids]: 1 2 #> hemibrain [2 ids]: 2 1 c(cf_ids(flywire = 1, hemibrain = 2), cf_ids(hemibrain = 1:2, flywire=1:2), unique=FALSE) #> flywire [3 ids]: 1 1 2 #> hemibrain [3 ids]: 2 1 2 # \\donttest{ c(cf_ids(flywire = 1, hemibrain = 2), cf_ids(hemibrain = '/SMP55[0-9]', flywire=1:2)) #> flywire [2 ids]: 1 2 #> hemibrain [19 ids]: 2 452689494 579700707 328274638 392757094 605166418 298262663 361114148 669670654 613394707 ... # }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch metadata for neurons from connectome datasets — cf_meta","title":"Fetch metadata for neurons from connectome datasets — cf_meta","text":"Fetch metadata neurons connectome datasets","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch metadata for neurons from connectome datasets — cf_meta","text":"","code":"cf_meta(   ids,   bind.rows = TRUE,   integer64 = FALSE,   MoreArgs = list(flywire = list(type = c(\"cell_type\", \"hemibrain_type\"))) )"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch metadata for neurons from connectome datasets — cf_meta","text":"ids list ids named relevant datasets (see examples) bind.rows Whether bind data.frames dataset together, keeping common columns (default TRUE convenience note columns dropped). integer64 Whether ids character vectors (default) 64 bit ints (compact little fragile rely bit64 extension package.) MoreArgs named list arguments passed fetching metadata   given function. See details. flywire_type metadata column use flytable info table","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_meta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch metadata for neurons from connectome datasets — cf_meta","text":"MoreArgs list named standard dataset names   (e.g. returned cf_datasets.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch metadata for neurons from connectome datasets — cf_meta","text":"","code":"# \\donttest{ da2meta=cf_meta(cf_ids(hemibrain='DA2_lPN')) da2meta #>           id pre post upstream downstream status    statusLabel    voxels #> 1 1796817841 396  509      509       3275 Traced Roughly traced 726508881 #> 2 1796818119 511  818      818       4111 Traced Roughly traced 917547898 #> 3 1797505019 345  476      476       2932 Traced Roughly traced 450568345 #> 4 1827516355 391  548      548       3263 Traced Roughly traced 741928779 #> 5  818983130 409  562      562       3400 Traced Roughly traced 612641685 #>   cropped  instance    type cellBodyFiber notes  soma side class group #> 1   FALSE DA2_lPN_R DA2_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #> 2   FALSE DA2_lPN_R DA2_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #> 3   FALSE DA2_lPN_R DA2_lPN         AVM02  <NA> FALSE    R  <NA>  <NA> #> 4   FALSE DA2_lPN_R DA2_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #> 5   FALSE DA2_lPN_R DA2_lPN         AVM02  <NA> FALSE    R  <NA>  <NA> #>     dataset           key #> 1 hemibrain hb:1796817841 #> 2 hemibrain hb:1796818119 #> 3 hemibrain hb:1797505019 #> 4 hemibrain hb:1827516355 #> 5 hemibrain  hb:818983130 # / introduces a regular expression mbonmeta=cf_meta(cf_ids(hemibrain='/MBON.+')) # }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partners.html","id":null,"dir":"Reference","previous_headings":"","what":"Flexible function for fetching partner data across datasets — cf_partners","title":"Flexible function for fetching partner data across datasets — cf_partners","text":"Flexible function fetching partner data across datasets","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partners.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flexible function for fetching partner data across datasets — cf_partners","text":"","code":"cf_partners(   ids,   threshold = 1L,   partners = c(\"inputs\", \"outputs\"),   bind.rows = TRUE )"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partners.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flexible function for fetching partner data across datasets — cf_partners","text":"ids list ids named relevant datasets (see examples) threshold return edges least many matches. 0 option since neuprint sometimes returns 0 weight edges. partners Whether return inputs outputs bind.rows Whether bind data.frames dataset together, keeping common columns (default TRUE convenience note columns dropped).","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partners.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flexible function for fetching partner data across datasets — cf_partners","text":"data.frame named list (bind.rows=FALSE)","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partners.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flexible function for fetching partner data across datasets — cf_partners","text":"","code":"# \\donttest{ da2ds=cf_partners(list(hemibrain='DA2_lPN'), threshold=5) library(dplyr) da2ds %>%   count(type, wt=weight, sort=TRUE) #>            type   n #> 1       ORN_DA2 667 #> 2       DA2_lPN  89 #> 3         lLN10  85 #> 4         lLN2S  85 #> 5        v2LN30  72 #> 6  hb1796818119  68 #> 7       LHPV4b3  56 #> 8       lLN2T_a  48 #> 9       lLN2P_c  46 #> 10 hb1796817841  32 #> 11       l2LN18  23 #> 12      LHCENT3  14 #> 13 hb1797505019  14 #> 14          APL  12 #> 15 hb1827516355  12 #> 16      lLN2T_d  12 #> 17      lLN2T_e  11 #> 18      LHPD5c1  10 #> 19       lLN1_b  10 #> 20     LHPV12a1   6 #> 21          CSD   5 #> 22    LHPV2b5_a   5 #> 23  hb818983130   5 #> 24       lLN12A   5 #> 25       lLN1_c   5 # } if (FALSE) { cf_partners(list(flywire='DA2_lPN'))  DA2_lPN=cf_partners(list(flywire='DA2_lPN', malecns='DA2_lPN')) }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/coconatfly-package.html","id":null,"dir":"Reference","previous_headings":"","what":"coconatfly: Comparative Connectomics of Public and In Progress Drosophila Datasets — coconatfly-package","title":"coconatfly: Comparative Connectomics of Public and In Progress Drosophila Datasets — coconatfly-package","text":"Experimental package enable comparative connectomics analysis multiple Drosophila connectomics datasets, including private ones still development.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/coconatfly/reference/coconatfly-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"coconatfly: Comparative Connectomics of Public and In Progress Drosophila Datasets — coconatfly-package","text":"Maintainer: Gregory Jefferis jefferis@gmail.com (ORCID)","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Interconvert between keys and ids/datasets — keys","title":"Interconvert between keys and ids/datasets — keys","text":"Neurons within dataset identified numeric ids may unique across datasets. Therefore make unique datatset use keys form \"<dataset>:<id>\". keys2df produces data.frame columns   id dataset describing ids dataset.   ordering data.frame match order keys input   vector. keys2list converts character vector keys list ids one list element dataset","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interconvert between keys and ids/datasets — keys","text":"","code":"keys(x)  keys2df(keys, integer64 = FALSE)  keys2list(keys, integer64 = FALSE)"},{"path":"https://flyconnectome.github.io/coconatfly/reference/keys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interconvert between keys and ids/datasets — keys","text":"x list dataframe specifying within dataset ids dataset names. keys character vector keys integer64 Whether output ids character vectors (default) integer64","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/keys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interconvert between keys and ids/datasets — keys","text":"keys character vector keys form  \"<dataset>:<id>\".","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/coconatfly/reference/keys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interconvert between keys and ids/datasets — keys","text":"","code":"# \\donttest{ keys(cf_ids(hemibrain=12345, flywire='4611686018427387904')) #> fw:4611686018427387904 #> hb:12345 # } # \\donttest{  # }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://flyconnectome.github.io/coconatfly/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"Cosine cluster across hemibrain flywire","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"","code":"triple_cosine_plot(   x,   fwtype = x,   version = NULL,   ...,   threshold = 5,   partners = c(\"outputs\", \"inputs\"),   labRow = \"{type}_{abbreviate_datasets(dataset)}{side}\",   group = \"type\",   heatmap = TRUE,   interactive = FALSE,   nas = c(\"zero\", \"drop\"),   method = c(\"ward.D\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\", \"centroid\",     \"ward.D2\") )"},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"x Hemibrain ids dataframe generated triple_connection_table fwtype Optional flywire ids interpreted flywire_ids function version Connectome data dump version. See flywire_connectome_data_version details. ... Additional arguments heatmap threshold Minimum connection weight included finding partners partners Whether use output input partners clustering. Default now uses . labRow character vector defining labels rows resultant heatmap group column use grouping partners. heatmap logical indicating whether plot heatmap function plot heatmap whose argument names compatible stats::heatmap. gplots::heatmap.2 good example. interactive TRUE returns shiny-based interactive heatmap nas rows/columns NAs computing cosine matrix. Dropping may mathematically satisfactory eliminates neurons comparison, default set NA elements 0 similarity. method clustering method. See hclust details.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"list returned heatmap","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"Note bilateral neurons may work better use either   input partners output partners .","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"","code":"# \\donttest{ # AOTU063 should be separated into two subtypes. # Very clear based on output clustering and also some small morphological differences. triple_cosine_plot('AOTU063', partners = 'o') #> Error in add_celltype_info(res, idcol = partner_col, version = version): Expect either character or integer64 ids!  # LAL074/LAL084 are the same type. # Were incorrectly split due to annotation into separate hemibrain CBFs # note that the compound type 'LAL074,LAL084' will be used to find flywire # neurons but expanded to the regex \"(LAL074|LAL084)\" in order to find # both hemibrain types triple_cosine_plot('LAL074,LAL084', partners = 'i') #> Matching types across datasets. Dropping 532/1184 input partner types with total weight 8561/25838 #> Warning: Unknown or uninitialised column: `partners`. #> Error in split.default(x = seq_len(nrow(x)), f = f, drop = drop, ...): group length is 0 but data length > 0 # }"}]
