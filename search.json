[{"path":"https://flyconnectome.github.io/coconatfly/articles/AOTU063.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"3. Splitting AOTU063 cell type","text":"Fig 6 manuscript Schlegel et al 2023 show example across-dataset cell typing using AOTU063 example. Fig 6A Schlegel et al 2023 bioRxiv able recapitulate basic features analysis . analysis use version 630 connectivity / annotation data released June 2023. set option use lower level fafbseg package ensure . may need download relevant data dumps done previously.  can get dendrogram clustering  cut two extract two clusters using coconat::add_cluster_info() helper function. can see group 2 seems “b” type.","code":"library(coconatfly) library(dplyr) fafbseg::flywire_connectome_data_version(set = 630) fafbseg::download_flywire_release_data(version = 630) aotu63=cf_meta(cf_ids(query = '/type:AOTU063.*', datasets = c(\"flywire\",\"hemibrain\"))) #> Loading required namespace: git2r aotu63 #>                   id side   class     type group          instance   dataset #> 1 720575940620326253    R central AOTU063a  <NA>        AOTU063a_R   flywire #> 2 720575940618697118    L central AOTU063b  <NA>        AOTU063b_L   flywire #> 3 720575940621925631    R central AOTU063b  <NA>        AOTU063b_R   flywire #> 4 720575940631129362    L central AOTU063a  <NA>        AOTU063a_L   flywire #> 5          791039731    R    <NA>  AOTU063  <NA> AOTU063(SCB058)_R hemibrain #> 6          800929667    R    <NA>  AOTU063  <NA> AOTU063(SCB058)_R hemibrain #>                     key #> 1 fw:720575940620326253 #> 2 fw:720575940618697118 #> 3 fw:720575940621925631 #> 4 fw:720575940631129362 #> 5          hb:791039731 #> 6          hb:800929667 aotu63 %>%   cf_cosine_plot() #> Matching types across datasets. Dropping 186/421 output partner types with total weight 3203/10892 #> Matching types across datasets. Dropping 370/1011 input partner types with total weight 4789/17752 aotu63.hc = cf_cosine_plot(aotu63, heatmap = FALSE) #> Matching types across datasets. Dropping 186/421 output partner types with total weight 3203/10892 #> Matching types across datasets. Dropping 370/1011 input partner types with total weight 4789/17752 plot(aotu63.hc) aotu63=coconat::add_cluster_info(aotu63, dend=aotu63.hc, k=2) #> Warning in coconat::add_cluster_info(aotu63, dend = aotu63.hc, k = 2): Multiple standard id columns are present in aotu63 #> Choosing key aotu63 %>%    select(side, type, dataset, group_k2, key) %>%    arrange(group_k2, side) #>   side     type   dataset group_k2                   key #> 1    L AOTU063a   flywire        1 fw:720575940631129362 #> 2    R AOTU063a   flywire        1 fw:720575940620326253 #> 3    R  AOTU063 hemibrain        1          hb:800929667 #> 4    L AOTU063b   flywire        2 fw:720575940618697118 #> 5    R AOTU063b   flywire        2 fw:720575940621925631 #> 6    R  AOTU063 hemibrain        2          hb:791039731"},{"path":"https://flyconnectome.github.io/coconatfly/articles/AOTU063.html","id":"finding-the-partners-that-define-the-types","dir":"Articles","previous_headings":"","what":"Finding the partners that define the types","title":"3. Splitting AOTU063 cell type","text":"might distinguish two types? can fetch, say, input partners, look connection strength varies across types. get started let’s redefine type 6 query neurons based clustering. fetch input partners merge AOTU063 type (.e. AOTU063a AOTU063b) new column called qtype Ok preparatory work can now make summary inputs across different types datasets. pipeline little involved, commented extensively follow step step make sense. can see top cell types already suggest number likely explanations. example LC10 provides 10% input AOTU063a vs AOTU063b LT52 input much stronger AOTU063b AOTU063a. Crucially patterns consistent across datasets.","code":"aotu63v2=aotu63 %>%    mutate(type=case_when(     group_k2==1 ~ 'AOTU063a',     group_k2==2 ~ 'AOTU063b'   )) aotu63in <- cf_partners(aotu63, partners = 'in', threshold = 10) aotu63in #> # A tibble: 625 × 8 #>     pre_id post_id weight side  type    dataset pre_key               post_key   #>    <int64> <int64>  <int> <chr> <chr>   <chr>   <chr>                 <chr>      #>  1    7e17    7e17    118 R     LT52    flywire fw:720575940640004174 fw:720575… #>  2    7e17    7e17    109 R     LT52    flywire fw:720575940618982725 fw:720575… #>  3    7e17    7e17    109 R     AOTU041 flywire fw:720575940627738640 fw:720575… #>  4    7e17    7e17     96 L     LT52    flywire fw:720575940612465777 fw:720575… #>  5    7e17    7e17     95 R     LT52    flywire fw:720575940612837811 fw:720575… #>  6    7e17    7e17     90 L     AOTU042 flywire fw:720575940619453861 fw:720575… #>  7    7e17    7e17     87 R     SIP034  flywire fw:720575940628728172 fw:720575… #>  8    7e17    7e17     83 R     LT52    flywire fw:720575940626024336 fw:720575… #>  9    7e17    7e17     83 R     AOTU041 flywire fw:720575940638668659 fw:720575… #> 10    7e17    7e17     82 R     AOTU014 flywire fw:720575940620321158 fw:720575… #> # ℹ 615 more rows # note that AOTU063 neurons will be the postsynaptic partners in this dataframe aotu63in <- aotu63in %>%    left_join(     aotu63v2 %>% mutate(qtype=type) %>% select(qtype, key),     by=c(\"post_key\"='key')) aotu63in %>%    select(weight, type, qtype) #> # A tibble: 625 × 3 #>    weight type    qtype    #>     <int> <chr>   <chr>    #>  1    118 LT52    AOTU063b #>  2    109 LT52    AOTU063b #>  3    109 AOTU041 AOTU063a #>  4     96 LT52    AOTU063b #>  5     95 LT52    AOTU063b #>  6     90 AOTU042 AOTU063a #>  7     87 SIP034  AOTU063a #>  8     83 LT52    AOTU063b #>  9     83 AOTU041 AOTU063a #> 10     82 AOTU014 AOTU063b #> # ℹ 615 more rows aotu63in %>%    mutate(dataset=abbreviate_datasets(dataset)) %>%    # FlyWire has e.g. LC10a LC10c annotated, but not hemibrain   mutate(type=case_when(     grepl(\"LC10\", type) ~ \"LC10\",     T ~ type   )) %>%    # summarise the connection strength by query cell type, data set    # and partner (downstream) cell type   group_by(qtype, dataset, type) %>%    summarise(weight=sum(weight)) %>%    # sort with strongest partners first   arrange(desc(weight)) %>%    # make four columns, one for each query type / dataset combination    tidyr::pivot_wider(     names_from = c(qtype, dataset),      values_from = weight,      values_fill = 0) %>%    # convert from synaptic counts to percentages of total input   mutate(across(-type, ~round(100*.x/sum(.x)))) #> `summarise()` has grouped output by 'qtype', 'dataset'. You can override using #> the `.groups` argument. #> # A tibble: 46 × 5 #>    type    AOTU063a_fw AOTU063b_fw AOTU063a_hb AOTU063b_hb #>    <chr>         <dbl>       <dbl>       <dbl>       <dbl> #>  1 LC10             56          46          56          45 #>  2 LT52              7          31          11          26 #>  3 SIP034            7           0           5           0 #>  4 NA                6           2           0           0 #>  5 AOTU041           5           2           5           1 #>  6 AOTU042           4           3           3           2 #>  7 AOTU014           0           5           0           5 #>  8 VES041            3           0           3           0 #>  9 AOTU065           2           2           2           2 #> 10 AOTU028           2           0           2           0 #> # ℹ 36 more rows"},{"path":"https://flyconnectome.github.io/coconatfly/articles/AOTU063.html","id":"distinctive-output-partners","dir":"Articles","previous_headings":"Finding the partners that define the types","what":"Distinctive output partners","title":"3. Splitting AOTU063 cell type","text":"things quite obvious IB008/IB010 look different newly defined DNs FlyWire like DNde002/DNbe004/DNae011 look like might interesting.","code":"aotu63out <- cf_partners(aotu63, partners = 'out', threshold = 10)  aotu63out <- aotu63out %>%    left_join(     aotu63v2 %>% mutate(qtype=type) %>% select(qtype, key),     by=c(\"pre_key\"='key'))  aotu63out %>%    mutate(dataset=abbreviate_datasets(dataset)) %>%    # FlyWire has e.g. LC10a LC10c annotated, but not hemibrain   mutate(type=case_when(     grepl(\"LC10\", type) ~ \"LC10\",     T ~ type   )) %>%    group_by(qtype, dataset, type) %>%    summarise(weight=sum(weight)) %>%    arrange(desc(weight)) %>%    tidyr::pivot_wider(names_from = c(qtype, dataset), values_from = weight, values_fill = 0) %>%    # convert from raw to pct   mutate(across(-type, ~round(100*.x/sum(.x)))) #> `summarise()` has grouped output by 'qtype', 'dataset'. You can override using #> the `.groups` argument. #> # A tibble: 72 × 5 #>    type    AOTU063a_fw AOTU063b_fw AOTU063a_hb AOTU063b_hb #>    <chr>         <dbl>       <dbl>       <dbl>       <dbl> #>  1 IB008            15          11          14           9 #>  2 DNa10            12          11           9           7 #>  3 IB010            11           5           8           5 #>  4 DNde002           3           9           0           0 #>  5 AOTU007           8           7           6           8 #>  6 VES064            7           4           5           4 #>  7 DNae011           7           3           0           0 #>  8 DNbe004           6           0           0           0 #>  9 NA                5           0           0           0 #> 10 AOTU024           1           6           1           2 #> # ℹ 62 more rows"},{"path":"https://flyconnectome.github.io/coconatfly/articles/TuTu.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"2. Clustering TuTu neurons","text":"short article gives example across dataset connectivity clustering using flywire hemibrain datasets. provides support specific neuronal cell types first proposed hemibrain. TuTu neurons class visual interneurons connect two optic tubercles side brain. Inputs tubercle include narrow field visual interneurons e.g. responsive small objects flies. can read VFB, called adult tubercle-tubercle neuron [FBbt_00051062]. 4 TuTu neurons originating hemisphere (8 per brain). TuTuA neurons larger arborisations medial part optic tubercle; TuTuB neurons smaller arbours lateral part. can examine 3D using cocoglancer scene (cocoglancer across-dataset configuration neuroglancer web app described ).","code":""},{"path":"https://flyconnectome.github.io/coconatfly/articles/TuTu.html","id":"setup","dir":"Articles","previous_headings":"Introduction","what":"Setup","title":"2. Clustering TuTu neurons","text":"first time using coconatfly, additional setup required beyond package installation. Please see getting started vignette details downloading / authenticating connectome data sources.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/articles/TuTu.html","id":"fetching-the-neurons","dir":"Articles","previous_headings":"","what":"Fetching the neurons","title":"2. Clustering TuTu neurons","text":"OK preamble, let’s get started. First need load two required libraries. analysis use version 630 connectivity / annotation data released June 2023. ensures cell type annotations state preceding full outcome analysis vignette. set option use lower level fafbseg package ensure . may need download relevant data dumps done previously (see also getting started vignette). following TuTu neurons recorded hemibrain FAFB-FlyWire. Note use regular expression (introduced /) match type field. .* means number characters can follow TuTu type name. can see hemibrain TuTuB neurons typed two subtypes, flywire neurons . can run across-dataset cosine connectivity clustering neurons like :  interesting couple levels. First can see TuTuB hemibrain neurons separate two groups. true even though things bit messy TuTuB_a_hbL neuron almost certainly heavily truncated soma left hand (missing) side hemibrain. can also see flywire neurons also split nicely. two groups four neurons . group contains one neuron hemisphere x dataset combination. can update flywire cell typing match hemibrain TuTuB_a TuTuB_b groups.","code":"library(dplyr) library(coconatfly) fafbseg::flywire_connectome_data_version(set = 630) # fafbseg::download_flywire_release_data(version = 630) tutus=cf_meta(cf_ids('/type:TuTu.*', datasets = c(\"hemibrain\", \"flywire\"))) #> Loading required namespace: git2r tutus #>                    id side   class    type group         instance   dataset #> 1  720575940621226846    L central   TuTuA  <NA>          TuTuA_L   flywire #> 2  720575940633550431    R central TuTuB_a  <NA>        TuTuB_a_R   flywire #> 3  720575940612218547    L central   TuTuA  <NA>          TuTuA_L   flywire #> 4  720575940635979000    L central TuTuB_b  <NA>        TuTuB_b_L   flywire #> 5  720575940637997427    R central TuTuB_b  <NA>        TuTuB_b_R   flywire #> 6  720575940623326868    L central TuTuB_a  <NA>        TuTuB_a_L   flywire #> 7  720575940614041238    R central   TuTuA  <NA>          TuTuA_R   flywire #> 8  720575940622538520    R central   TuTuA  <NA>          TuTuA_R   flywire #> 9          5813013691    L    <NA>   TuTuA  <NA>   TuTuA(ADL19)_L hemibrain #> 10          676836779    L    <NA>   TuTuA  <NA>   TuTuA(ADL19)_L hemibrain #> 11          708290604    R    <NA>   TuTuA  <NA>          TuTuA_R hemibrain #> 12          925008763    R    <NA>   TuTuA  <NA>          TuTuA_R hemibrain #> 13         5813014028    R    <NA> TuTuB_a  <NA>        TuTuB_a_R hemibrain #> 14          770226597    L    <NA> TuTuB_a  <NA> TuTuB_a(ADL19)_L hemibrain #> 15          769544445    R    <NA> TuTuB_b  <NA>        TuTuB_b_R hemibrain #> 16          987759904    L    <NA> TuTuB_b  <NA> TuTuB_b(ADL19)_L hemibrain #>                      key #> 1  fw:720575940621226846 #> 2  fw:720575940633550431 #> 3  fw:720575940612218547 #> 4  fw:720575940635979000 #> 5  fw:720575940637997427 #> 6  fw:720575940623326868 #> 7  fw:720575940614041238 #> 8  fw:720575940622538520 #> 9          hb:5813013691 #> 10          hb:676836779 #> 11          hb:708290604 #> 12          hb:925008763 #> 13         hb:5813014028 #> 14          hb:770226597 #> 15          hb:769544445 #> 16          hb:987759904 tutus %>%    count(dataset, type, side) #>      dataset    type side n #> 1    flywire   TuTuA    L 2 #> 2    flywire   TuTuA    R 2 #> 3    flywire TuTuB_a    L 1 #> 4    flywire TuTuB_a    R 1 #> 5    flywire TuTuB_b    L 1 #> 6    flywire TuTuB_b    R 1 #> 7  hemibrain   TuTuA    L 2 #> 8  hemibrain   TuTuA    R 2 #> 9  hemibrain TuTuB_a    L 1 #> 10 hemibrain TuTuB_a    R 1 #> 11 hemibrain TuTuB_b    L 1 #> 12 hemibrain TuTuB_b    R 1 tutus %>%    cf_cosine_plot() #> Matching types across datasets. Dropping 1300/1922 output partner types with total weight 20970/34391 #> Matching types across datasets. Dropping 1516/2370 input partner types with total weight 25651/43977 #> Warning in Matrix::cov2cor(cpx): diag(.) had 0 or NA entries; non-finite result #> is doubtful"},{"path":"https://flyconnectome.github.io/coconatfly/articles/TuTu.html","id":"tutua","dir":"Articles","previous_headings":"Fetching the neurons","what":"TuTuA","title":"2. Clustering TuTu neurons","text":"However, interestingly can also see TuTuA group splits strongly flywire two groups evident hemibrain. strongly suggests property bilateral connectivity defines difference. can try seeing just use input connectivity cluster things resolve:  Hmm situation still . Since two flywire groups well-separated almost certainly real split. fact candidate anatomical difference placement contralateral axons clearly correlates split. TuTuA neurons LHS FlyWire TuTuA neurons LHS FlyWire candidate axonal difference even visible hemibrain. TuTuA neurons LHS FlyWire However since across-brain connectivity clustering yet support (likely owing lack shared labelled partner neurons), record split now. strongly suspect observe split future connectomes though.","code":"tutus %>%    filter(grepl(\"TuTuA\", type)) %>%    cf_cosine_plot(partners = 'in') #> Matching types across datasets. Dropping 888/1709 input partner types with total weight 18225/35561"},{"path":"https://flyconnectome.github.io/coconatfly/articles/TuTu.html","id":"setting-the-new-types","dir":"Articles","previous_headings":"","what":"Setting the new types","title":"2. Clustering TuTu neurons","text":"Group 4 contains TuTuB_b neurons Group 5 contains TuTuB_b neurons following code help find Flybase/Virtual Fly Brain anatomy ontology (FBbt) ids neurons:","code":"tutus.hc <- tutus %>%    cf_cosine_plot(heatmap = F) #> Matching types across datasets. Dropping 1300/1922 output partner types with total weight 20970/34391 #> Matching types across datasets. Dropping 1516/2370 input partner types with total weight 25651/43977 #> Warning in Matrix::cov2cor(cpx): diag(.) had 0 or NA entries; non-finite result #> is doubtful tutus.meta=cf_meta(tutus.hc$labels)  plot(tutus.hc, labels = tutus.meta$type) tutus.meta2=coconat::add_cluster_info(tutus.meta, tutus.hc, k = 5) #> Warning in coconat::add_cluster_info(tutus.meta, tutus.hc, k = 5): Multiple standard id columns are present in tutus.meta #> Choosing key tutus.meta2 %>%    count(dataset, group_k5) #>     dataset group_k5 n #> 1   flywire        1 2 #> 2   flywire        2 2 #> 3   flywire        4 2 #> 4   flywire        5 2 #> 5 hemibrain        1 2 #> 6 hemibrain        2 2 #> 7 hemibrain        3 4 tutus.meta2 %>%    filter(group_k5==4) #>                   id side   class  type group instance dataset #> 1 720575940614041238    R central TuTuA  <NA>  TuTuA_R flywire #> 2 720575940612218547    L central TuTuA  <NA>  TuTuA_L flywire #>                     key dendid group_k5 #> 1 fw:720575940614041238     13        4 #> 2 fw:720575940612218547     14        4 tutus.meta2 %>%    filter(group_k5==5) #>                   id side   class  type group instance dataset #> 1 720575940622538520    R central TuTuA  <NA>  TuTuA_R flywire #> 2 720575940621226846    L central TuTuA  <NA>  TuTuA_L flywire #>                     key dendid group_k5 #> 1 fw:720575940622538520     15        5 #> 2 fw:720575940621226846     16        5 natmanager::install(pkgs = 'vfbr') vfbr::vfb_autocomplete_query('TuTuB') %>%    filter(grepl(\"FBbt\", short_form))"},{"path":"https://flyconnectome.github.io/coconatfly/articles/TuTu.html","id":"old-vs-new-annotations","dir":"Articles","previous_headings":"","what":"Old vs new annotations","title":"2. Clustering TuTu neurons","text":"release flywire annotations data prepared December 2023 accompany public release v783 proofread FlyWire segmentation, updated TuTu cell types. can summarised follows:","code":"# nb temporarily change active flywire version fafbseg::flywire_connectome_data_version(set = 783) tutus.new=cf_meta(cf_ids(flywire='/type:TuTu.*')) fafbseg::flywire_connectome_data_version(set = 630) tutus %>%    filter(dataset=='flywire') %>%    with(table(type, side)) #>          side #> type      L R #>   TuTuA   2 2 #>   TuTuB_a 1 1 #>   TuTuB_b 1 1 tutus.new %>%    with(table(type, side)) #>          side #> type      L R #>   TuTuAa  1 1 #>   TuTuAb  1 1 #>   TuTuB_a 1 1 #>   TuTuB_b 1 1"},{"path":"https://flyconnectome.github.io/coconatfly/articles/getting-started.html","id":"setup-for-brain-connectome-data-","dir":"Articles","previous_headings":"","what":"Setup for brain connectome data.","title":"1. Getting started with coconatfly","text":"time writing main datasets interest coconatfly hemibrain flywire. Installing coconatfly automatically install natverse packages required analysis. However, extra steps still required. already done , also need record neuprint token access hemibrain data. Go https://neuprint.janelia.org/account, copy Auth Token edit R environ file add line like : Replacing auth token sure one line line break last quotation mark.","code":"# first install coconatfly if(!requireNamespace('natmanager'))   install.packages('natmanager') natmanager::install(pkgs = 'flyconnectome/coconatfly') # then get flywire data fafbseg::download_flywire_release_data() usethis::edit_r_environ() neuprint_token=\"eyJhbH0lc9OqzJ6evvcJ23KmIi.eyJlb6B8nUg8senJO1ZVzHb6uQ1fvncAiWdFcTIwTQb0xOcxa3TjKHVdLZ5OAtHzjWJJLqpQjiTikWryIfgUHCKoq31RSdDMqD7mah0RWCFaEPrTDdPm7OfRBizNdoqyyWAE61g9FWb2CAh8kAfcsb3ylVG3MwFOYpX91ayWxtp1prfjtm9dte9mFddGdWdr8444Rrun8cLksyELl93utdnGAQReSgiNy-jDLujyRCSRCAOq23X049gRA9QtJcOKCDtdiFyQhMKzLk8EISt7Cnn9AS1\""},{"path":"https://flyconnectome.github.io/coconatfly/articles/getting-started.html","id":"set-up-for-vnc-data","dir":"Articles","previous_headings":"","what":"Set up for VNC data","title":"1. Getting started with coconatfly","text":"VNC data, main datasets FANC MANC. MANC data available set neuprint access token described brain section. FANC data need separate CAVE access token. Essentially covered :","code":"fancr::fanc_set_token() # check all is good fancr::dr_fanc()"},{"path":"https://flyconnectome.github.io/coconatfly/articles/getting-started.html","id":"brain-example","dir":"Articles","previous_headings":"","what":"Brain example","title":"1. Getting started with coconatfly","text":"Ok place, let’s check can use connectome data, starting brain. use cf_ids() specify neurons different datasets: can ask specific cell type across datasets, MBON01, mushroom body output neuron 1 (aka M6 MBON-gamma5beta’2a). can regular expression query returning MBONs: simple summaries metadata returned cf_meta(): general things look quite consistent across sides datasets (although neurons course missing LHS hemibrain).","code":"library(coconatfly) #> Loading required package: nat #> Loading required package: rgl #> Registered S3 method overwritten by 'nat': #>   method             from #>   as.mesh3d.ashape3d rgl #> Some nat functions depend on a CMTK installation. See ?cmtk and README.md for details. #>  #> Attaching package: 'nat' #> The following object is masked from 'package:rgl': #>  #>     wire3d #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, union library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:nat': #>  #>     intersect, setdiff, union #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union cf_ids(hemibrain = 'ORN_DA2', expand = TRUE) #> hemibrain [35 ids]: 1669017843 1669699714 1669946117 1670382036 1670386270 1670390647 1669358817 1671659809 1702107389 1702802179 ... cf_meta(cf_ids('MBON01', datasets = c(\"flywire\", \"hemibrain\"))) #> Loading required namespace: git2r #>                   id side   class   type group         instance   dataset #> 1 720575940624117245    R central MBON01  <NA>         MBON01_R   flywire #> 2 720575940643309197    L central MBON01  <NA>         MBON01_L   flywire #> 3          612371421    R    <NA> MBON01  <NA> MBON01(y5B'2a)_R hemibrain #> 4          673509195    L    <NA> MBON01  <NA> MBON01(y5B'2a)_L hemibrain #>                     key #> 1 fw:720575940624117245 #> 2 fw:720575940643309197 #> 3          hb:612371421 #> 4          hb:673509195 mbonmeta=cf_meta(cf_ids('/type:MBON.+', datasets = c(\"flywire\", \"hemibrain\"))) mbonmeta #>                     id side   class          type group #> 1   720575940624185095    L central        MBON02  <NA> #> 2   720575940624117245    R central        MBON01  <NA> #> 3   720575940638526278    R central        MBON32  <NA> #> 4   720575940629585602    R central        MBON10  <NA> #> 5   720575940637934308    R central        MBON30  <NA> #> 6   720575940632118343    L central        MBON10  <NA> #> 7   720575940609959637    L central        MBON32  <NA> #> 8   720575940638163428    L central        MBON06  <NA> #> 9   720575940630496374    R central        MBON05  <NA> #> 10  720575940642142861    L central        MBON10  <NA> #> 11  720575940611344078    R central        MBON20  <NA> #> 12  720575940634822751    R central   MBON17-like  <NA> #> 13  720575940617552340    R central        MBON02  <NA> #> 14  720575940624280328    R central        MBON33  <NA> #> 15  720575940617567206    L central        MBON23  <NA> #> 16  720575940643700640    R central        MBON29  <NA> #> 17  720575940615221811    R central        MBON10  <NA> #> 18  720575940614026193    R central        MBON14  <NA> #> 19  720575940633209647    L central        MBON10  <NA> #> 20  720575940623001480    R central        MBON12  <NA> #> 21  720575940608304220    R central   MBON15-like  <NA> #> 22  720575940614595218    L central        MBON28  <NA> #> 23  720575940636992368    R central        MBON31  <NA> #> 24  720575940621828443    L central        MBON12  <NA> #> 25  720575940637902938    L central        MBON35  <NA> #> 26  720575940638774606    L central        MBON17  <NA> #> 27  720575940639697827    R central        MBON14  <NA> #> 28  720575940626833021    L central        MBON19  <NA> #> 29  720575940618008859    L central        MBON30  <NA> #> 30  720575940635841143    L central        MBON15  <NA> #> 31  720575940618249797    R central        MBON27  <NA> #> 32  720575940629856515    L central        MBON09  <NA> #> 33  720575940623905719    R central        MBON12  <NA> #> 34  720575940629529722    L central        MBON10  <NA> #> 35  720575940624659943    L central MBON25,MBON34  <NA> #> 36  720575940624590316    R central        MBON03  <NA> #> 37  720575940645304430    L central        MBON13  <NA> #> 38  720575940612196850    R central   MBON15-like  <NA> #> 39  720575940630767959    L central        MBON15  <NA> #> 40  720575940635082347    L central   MBON15-like  <NA> #> 41  720575940628757547    L central   MBON15-like  <NA> #> 42  720575940627144069    R central MBON25,MBON34  <NA> #> 43  720575940610647416    R central        MBON10  <NA> #> 44  720575940622093436    R central        MBON15  <NA> #> 45  720575940624696810    L central   MBON15-like  <NA> #> 46  720575940629422086    L central        MBON09  <NA> #> 47  720575940647328900    R central        MBON10  <NA> #> 48  720575940650386553    L central   MBON17-like  <NA> #> 49  720575940639556467    R central        MBON10  <NA> #> 50  720575940612455338    R central        MBON15  <NA> #> 51  720575940617749538    R central        MBON11  <NA> #> 52  720575940617760257    R central        MBON17  <NA> #> 53  720575940619810389    R central MBON25,MBON34  <NA> #> 54  720575940634482783    R central        MBON19  <NA> #> 55  720575940644615716    L central        MBON31  <NA> #> 56  720575940626109315    R central        MBON19  <NA> #> 57  720575940623377802    L central        MBON16  <NA> #> 58  720575940626744921    R central        MBON16  <NA> #> 59  720575940623464316    R central        MBON24  <NA> #> 60  720575940622979277    L central        MBON27  <NA> #> 61  720575940614892182    R central        MBON28  <NA> #> 62  720575940620715224    L central        MBON21  <NA> #> 63  720575940643863496    L central        MBON20  <NA> #> 64  720575940621777391    R central        MBON21  <NA> #> 65  720575940606953858    R central        MBON23  <NA> #> 66  720575940630075703    L central        MBON12  <NA> #> 67  720575940652390134    L central        MBON07  <NA> #> 68  720575940632535756    L central        MBON14  <NA> #> 69  720575940643696288    L central        MBON14  <NA> #> 70  720575940623201833    L central        MBON11  <NA> #> 71  720575940635063135    R central        MBON22  <NA> #> 72  720575940616463477    L central        MBON22  <NA> #> 73  720575940629981440    L central        MBON26  <NA> #> 74  720575940623182847    L central        MBON33  <NA> #> 75  720575940626315010    R central        MBON13  <NA> #> 76  720575940632943277    R central        MBON35  <NA> #> 77  720575940624539284    L central        MBON18  <NA> #> 78  720575940620464321    L central        MBON04  <NA> #> 79  720575940628783363    R central        MBON07  <NA> #> 80  720575940643309197    L central        MBON01  <NA> #> 81  720575940614392999    L central        MBON29  <NA> #> 82  720575940617302365    L central        MBON07  <NA> #> 83  720575940622997453    R central        MBON18  <NA> #> 84  720575940624694503    L central        MBON03  <NA> #> 85  720575940628734376    R central        MBON04  <NA> #> 86  720575940610964946    R central        MBON09  <NA> #> 87  720575940607155890    R central        MBON26  <NA> #> 88  720575940623381956    R central        MBON07  <NA> #> 89  720575940630864847    R central        MBON09  <NA> #> 90  720575940638028607    R central        MBON06  <NA> #> 91  720575940621164720    L central        MBON05  <NA> #> 92  720575940623841463    L central        MBON19  <NA> #> 93  720575940631177803    L central        MBON24  <NA> #> 94  720575940624489964    R central MBON25,MBON34  <NA> #> 95  720575940616398303    L central MBON25,MBON34  <NA> #> 96  720575940623750325    L central MBON25,MBON34  <NA> #> 97           612371421    R    <NA>        MBON01  <NA> #> 98           673509195    L    <NA>        MBON01  <NA> #> 99           424789697    R    <NA>        MBON02  <NA> #> 100         5813022341    L    <NA>        MBON02  <NA> #> 101          487925037    R    <NA>        MBON03  <NA> #> 102          612738462    L    <NA>        MBON03  <NA> #> 103          487925063    R    <NA>        MBON04  <NA> #> 104          613079053    L    <NA>        MBON04  <NA> #> 105         1386512867    R    <NA>        MBON05  <NA> #> 106          799586652    L    <NA>        MBON05  <NA> #> 107          422725634    L    <NA>        MBON06  <NA> #> 108         5813061512    R    <NA>        MBON06  <NA> #> 109         1234386037    R    <NA>        MBON07  <NA> #> 110          611477605    L    <NA>        MBON07  <NA> #> 111          733036127    R    <NA>        MBON07  <NA> #> 112          920470959    L    <NA>        MBON07  <NA> #> 113         1016835041    L    <NA>        MBON09  <NA> #> 114         1048215779    L    <NA>        MBON09  <NA> #> 115         1078693835    R    <NA>        MBON09  <NA> #> 116          613719036    R    <NA>        MBON10  <NA> #> 117          672352543    R    <NA>        MBON10  <NA> #> 118          768555687    R    <NA>        MBON10  <NA> #> 119          424767514    R    <NA>        MBON11  <NA> #> 120          517518166    L    <NA>        MBON11  <NA> #> 121          704466265    R    <NA>        MBON12  <NA> #> 122          861665641    R    <NA>        MBON12  <NA> #> 123         1139667240    R    <NA>        MBON13  <NA> #> 124          300972942    R    <NA>        MBON14  <NA> #> 125          394225044    L    <NA>        MBON14  <NA> #> 126         5813067721    L    <NA>        MBON14  <NA> #> 127         5813068729    R    <NA>        MBON14  <NA> #> 128          642664141    R    <NA>        MBON15  <NA> #> 129          673702721    R    <NA>        MBON15  <NA> #> 130          457175171    R    <NA>   MBON15-like  <NA> #> 131          579916831    R    <NA>   MBON15-like  <NA> #> 132          673366098    R    <NA>        MBON16  <NA> #> 133         5812981264    R    <NA>        MBON17  <NA> #> 134         5812981543    R    <NA>   MBON17-like  <NA> #> 135          457196444    L    <NA>        MBON18  <NA> #> 136         5813020828    R    <NA>        MBON18  <NA> #> 137          423774471    R    <NA>        MBON19  <NA> #> 138          517854468    R    <NA>        MBON19  <NA> #> 139          792368888    R    <NA>        MBON20  <NA> #> 140         5813022896    R    <NA>        MBON21  <NA> #> 141          985813153    L    <NA>        MBON21  <NA> #> 142         5813042659    R    <NA>        MBON22  <NA> #> 143          985131499    L    <NA>        MBON22  <NA> #> 144          423382015    R    <NA>        MBON23  <NA> #> 145          487143497    R    <NA>        MBON24  <NA> #> 146          550081497    L    <NA>        MBON24  <NA> #> 147          612742248    L    <NA>        MBON25  <NA> #> 148          612422902    R    <NA>        MBON25  <NA> #> 149          912951014    L    <NA>        MBON26  <NA> #> 150          895441451    R    <NA>        MBON26  <NA> #> 151         5813061538    L    <NA>        MBON27  <NA> #> 152         5813117385    R    <NA>        MBON27  <NA> #> 153          457196643    R    <NA>        MBON28  <NA> #> 154         5813058048    R    <NA>        MBON29  <NA> #> 155         5813052909    L    <NA>        MBON29  <NA> #> 156         5813022234    R    <NA>        MBON30  <NA> #> 157         5813040205    L    <NA>        MBON30  <NA> #> 158          706948318    L    <NA>        MBON31  <NA> #> 159          894020730    R    <NA>        MBON31  <NA> #> 160          642732835    R    <NA>        MBON32  <NA> #> 161          643847447    L    <NA>        MBON32  <NA> #> 162          518670779    L    <NA>        MBON33  <NA> #> 163          547552266    R    <NA>        MBON33  <NA> #> 164         1173814525    L    <NA>        MBON34  <NA> #> 165         5813033000    R    <NA>        MBON34  <NA> #> 166          518930199    R    <NA>        MBON35  <NA> #> 167          611089775    L    <NA>        MBON35  <NA> #>                        instance   dataset                   key #> 1                      MBON02_L   flywire fw:720575940624185095 #> 2                      MBON01_R   flywire fw:720575940624117245 #> 3                      MBON32_R   flywire fw:720575940638526278 #> 4                      MBON10_R   flywire fw:720575940629585602 #> 5                      MBON30_R   flywire fw:720575940637934308 #> 6                      MBON10_L   flywire fw:720575940632118343 #> 7                      MBON32_L   flywire fw:720575940609959637 #> 8                      MBON06_L   flywire fw:720575940638163428 #> 9                      MBON05_R   flywire fw:720575940630496374 #> 10                     MBON10_L   flywire fw:720575940642142861 #> 11                     MBON20_R   flywire fw:720575940611344078 #> 12                MBON17-like_R   flywire fw:720575940634822751 #> 13                     MBON02_R   flywire fw:720575940617552340 #> 14                     MBON33_R   flywire fw:720575940624280328 #> 15                     MBON23_L   flywire fw:720575940617567206 #> 16                     MBON29_R   flywire fw:720575940643700640 #> 17                     MBON10_R   flywire fw:720575940615221811 #> 18                     MBON14_R   flywire fw:720575940614026193 #> 19                     MBON10_L   flywire fw:720575940633209647 #> 20                     MBON12_R   flywire fw:720575940623001480 #> 21                MBON15-like_R   flywire fw:720575940608304220 #> 22                     MBON28_L   flywire fw:720575940614595218 #> 23                     MBON31_R   flywire fw:720575940636992368 #> 24                     MBON12_L   flywire fw:720575940621828443 #> 25                     MBON35_L   flywire fw:720575940637902938 #> 26                     MBON17_L   flywire fw:720575940638774606 #> 27                     MBON14_R   flywire fw:720575940639697827 #> 28                     MBON19_L   flywire fw:720575940626833021 #> 29                     MBON30_L   flywire fw:720575940618008859 #> 30                     MBON15_L   flywire fw:720575940635841143 #> 31                     MBON27_R   flywire fw:720575940618249797 #> 32                     MBON09_L   flywire fw:720575940629856515 #> 33                     MBON12_R   flywire fw:720575940623905719 #> 34                     MBON10_L   flywire fw:720575940629529722 #> 35              MBON25,MBON34_L   flywire fw:720575940624659943 #> 36                     MBON03_R   flywire fw:720575940624590316 #> 37                     MBON13_L   flywire fw:720575940645304430 #> 38                MBON15-like_R   flywire fw:720575940612196850 #> 39                     MBON15_L   flywire fw:720575940630767959 #> 40                MBON15-like_L   flywire fw:720575940635082347 #> 41                MBON15-like_L   flywire fw:720575940628757547 #> 42              MBON25,MBON34_R   flywire fw:720575940627144069 #> 43                     MBON10_R   flywire fw:720575940610647416 #> 44                     MBON15_R   flywire fw:720575940622093436 #> 45                MBON15-like_L   flywire fw:720575940624696810 #> 46                     MBON09_L   flywire fw:720575940629422086 #> 47                     MBON10_R   flywire fw:720575940647328900 #> 48                MBON17-like_L   flywire fw:720575940650386553 #> 49                     MBON10_R   flywire fw:720575940639556467 #> 50                     MBON15_R   flywire fw:720575940612455338 #> 51                     MBON11_R   flywire fw:720575940617749538 #> 52                     MBON17_R   flywire fw:720575940617760257 #> 53              MBON25,MBON34_R   flywire fw:720575940619810389 #> 54                     MBON19_R   flywire fw:720575940634482783 #> 55                     MBON31_L   flywire fw:720575940644615716 #> 56                     MBON19_R   flywire fw:720575940626109315 #> 57                     MBON16_L   flywire fw:720575940623377802 #> 58                     MBON16_R   flywire fw:720575940626744921 #> 59                     MBON24_R   flywire fw:720575940623464316 #> 60                     MBON27_L   flywire fw:720575940622979277 #> 61                     MBON28_R   flywire fw:720575940614892182 #> 62                     MBON21_L   flywire fw:720575940620715224 #> 63                     MBON20_L   flywire fw:720575940643863496 #> 64                     MBON21_R   flywire fw:720575940621777391 #> 65                     MBON23_R   flywire fw:720575940606953858 #> 66                     MBON12_L   flywire fw:720575940630075703 #> 67                     MBON07_L   flywire fw:720575940652390134 #> 68                     MBON14_L   flywire fw:720575940632535756 #> 69                     MBON14_L   flywire fw:720575940643696288 #> 70                     MBON11_L   flywire fw:720575940623201833 #> 71                     MBON22_R   flywire fw:720575940635063135 #> 72                     MBON22_L   flywire fw:720575940616463477 #> 73                     MBON26_L   flywire fw:720575940629981440 #> 74                     MBON33_L   flywire fw:720575940623182847 #> 75                     MBON13_R   flywire fw:720575940626315010 #> 76                     MBON35_R   flywire fw:720575940632943277 #> 77                     MBON18_L   flywire fw:720575940624539284 #> 78                     MBON04_L   flywire fw:720575940620464321 #> 79                     MBON07_R   flywire fw:720575940628783363 #> 80                     MBON01_L   flywire fw:720575940643309197 #> 81                     MBON29_L   flywire fw:720575940614392999 #> 82                     MBON07_L   flywire fw:720575940617302365 #> 83                     MBON18_R   flywire fw:720575940622997453 #> 84                     MBON03_L   flywire fw:720575940624694503 #> 85                     MBON04_R   flywire fw:720575940628734376 #> 86                     MBON09_R   flywire fw:720575940610964946 #> 87                     MBON26_R   flywire fw:720575940607155890 #> 88                     MBON07_R   flywire fw:720575940623381956 #> 89                     MBON09_R   flywire fw:720575940630864847 #> 90                     MBON06_R   flywire fw:720575940638028607 #> 91                     MBON05_L   flywire fw:720575940621164720 #> 92                     MBON19_L   flywire fw:720575940623841463 #> 93                     MBON24_L   flywire fw:720575940631177803 #> 94              MBON25,MBON34_R   flywire fw:720575940624489964 #> 95              MBON25,MBON34_L   flywire fw:720575940616398303 #> 96              MBON25,MBON34_L   flywire fw:720575940623750325 #> 97             MBON01(y5B'2a)_R hemibrain          hb:612371421 #> 98             MBON01(y5B'2a)_L hemibrain          hb:673509195 #> 99             MBON02(B2B'2a)_R hemibrain          hb:424789697 #> 100            MBON02(B2B'2a)_L hemibrain         hb:5813022341 #> 101             MBON03(B'2mp)_R hemibrain          hb:487925037 #> 102             MBON03(B'2mp)_L hemibrain          hb:612738462 #> 103   MBON04(B'2mp_bilateral)_R hemibrain          hb:487925063 #> 104   MBON04(B'2mp_bilateral)_L hemibrain          hb:613079053 #> 105           MBON05(y4>y1y2)_R hemibrain         hb:1386512867 #> 106    MBON05(y4>y1y2)(AVM07)_L hemibrain          hb:799586652 #> 107       MBON06(B1>a)(AVM07)_L hemibrain          hb:422725634 #> 108              MBON06(B1>a)_R hemibrain         hb:5813061512 #> 109                MBON07(a1)_R hemibrain         hb:1234386037 #> 110                MBON07(a1)_L hemibrain          hb:611477605 #> 111                MBON07(a1)_R hemibrain          hb:733036127 #> 112                MBON07(a1)_L hemibrain          hb:920470959 #> 113      MBON09(y3B'1)(AVM17)_L hemibrain         hb:1016835041 #> 114      MBON09(y3B'1)(AVM17)_L hemibrain         hb:1048215779 #> 115             MBON09(y3B'1)_R hemibrain         hb:1078693835 #> 116               MBON10(B'1)_R hemibrain          hb:613719036 #> 117               MBON10(B'1)_R hemibrain          hb:672352543 #> 118               MBON10(B'1)_R hemibrain          hb:768555687 #> 119        MBON11(y1pedc>a/B)_R hemibrain          hb:424767514 #> 120 MBON11(y1pedc>a/B)(ADM05)_L hemibrain          hb:517518166 #> 121             MBON12(y2a'1)_R hemibrain          hb:704466265 #> 122             MBON12(y2a'1)_R hemibrain          hb:861665641 #> 123               MBON13(a'2)_R hemibrain         hb:1139667240 #> 124                MBON14(a3)_R hemibrain          hb:300972942 #> 125                MBON14(a3)_L hemibrain          hb:394225044 #> 126                MBON14(a3)_L hemibrain         hb:5813067721 #> 127                MBON14(a3)_R hemibrain         hb:5813068729 #> 128               MBON15(a'1)_R hemibrain          hb:642664141 #> 129               MBON15(a'1)_R hemibrain          hb:673702721 #> 130       MBON15-like(a'1a'2)_R hemibrain          hb:457175171 #> 131       MBON15-like(a'1a'2)_R hemibrain          hb:579916831 #> 132             MBON16(a'3ap)_R hemibrain          hb:673366098 #> 133              MBON17(a'3m)_R hemibrain         hb:5812981264 #> 134       MBON17-like(a'2a'3)_R hemibrain         hb:5812981543 #> 135       MBON18(a2sc)(PDL05)_L hemibrain          hb:457196444 #> 136              MBON18(a2sc)_R hemibrain         hb:5813020828 #> 137             MBON19(a2p3p)_R hemibrain          hb:423774471 #> 138             MBON19(a2p3p)_R hemibrain          hb:517854468 #> 139              MBON20(y1y2)_R hemibrain          hb:792368888 #> 140              MBON21(y4y5)_R hemibrain         hb:5813022896 #> 141       MBON21(y4y5)(PVL06)_L hemibrain          hb:985813153 #> 142             MBON22(calyx)_R hemibrain         hb:5813042659 #> 143      MBON22(calyx)(PVL06)_L hemibrain          hb:985131499 #> 144              MBON23(a2sp)_R hemibrain          hb:423382015 #> 145              MBON24(B2y5)_R hemibrain          hb:487143497 #> 146       MBON24(B2y5)(PDL05)_L hemibrain          hb:550081497 #> 147              MBON25(y1y2)_L hemibrain          hb:612742248 #> 148              MBON25(y1y2)_R hemibrain          hb:612422902 #> 149       MBON26(B'2d)(PDM28)_L hemibrain          hb:912951014 #> 150              MBON26(B'2d)_R hemibrain          hb:895441451 #> 151        MBON27(y5d)(PVM03)_L hemibrain         hb:5813061538 #> 152               MBON27(y5d)_R hemibrain         hb:5813117385 #> 153         MBON16-like(a'3a)_R hemibrain          hb:457196643 #> 154              MBON29(y4y5)_R hemibrain         hb:5813058048 #> 155       MBON29(y4y5)(PVL06)_L hemibrain         hb:5813052909 #> 156            MBON30(y1y2y3)_R hemibrain         hb:5813022234 #> 157     MBON30(y1y2y3)(AVM07)_L hemibrain         hb:5813040205 #> 158       MBON31(a'1a)(ADM10)_L hemibrain          hb:706948318 #> 159              MBON31(a'1a)_R hemibrain          hb:894020730 #> 160                MBON32(y2)_R hemibrain          hb:642732835 #> 161         MBON32(y2)(ADM08)_L hemibrain          hb:643847447 #> 162       MBON33(y2y3)(ADM05)_L hemibrain          hb:518670779 #> 163              MBON33(y2y3)_R hemibrain          hb:547552266 #> 164                MBON34(y2)_L hemibrain         hb:1173814525 #> 165                MBON34(y2)_R hemibrain         hb:5813033000 #> 166                MBON35(y2)_R hemibrain          hb:518930199 #> 167                MBON35(y2)_L hemibrain          hb:611089775 mbonmeta %>%    mutate(dss=paste0(abbreviate_datasets(dataset), side)) %>%    with(table(type, dss)) #>                dss #> type            fwL fwR hbL hbR #>   MBON01          1   1   1   1 #>   MBON02          1   1   1   1 #>   MBON03          1   1   1   1 #>   MBON04          1   1   1   1 #>   MBON05          1   1   1   1 #>   MBON06          1   1   1   1 #>   MBON07          2   2   2   2 #>   MBON09          2   2   2   1 #>   MBON10          4   5   0   3 #>   MBON11          1   1   1   1 #>   MBON12          2   2   0   2 #>   MBON13          1   1   0   1 #>   MBON14          2   2   2   2 #>   MBON15          2   2   0   2 #>   MBON15-like     3   2   0   2 #>   MBON16          1   1   0   1 #>   MBON17          1   1   0   1 #>   MBON17-like     1   1   0   1 #>   MBON18          1   1   1   1 #>   MBON19          2   2   0   2 #>   MBON20          1   1   0   1 #>   MBON21          1   1   1   1 #>   MBON22          1   1   1   1 #>   MBON23          1   1   0   1 #>   MBON24          1   1   1   1 #>   MBON25          0   0   1   1 #>   MBON25,MBON34   3   3   0   0 #>   MBON26          1   1   1   1 #>   MBON27          1   1   1   1 #>   MBON28          1   1   0   1 #>   MBON29          1   1   1   1 #>   MBON30          1   1   1   1 #>   MBON31          1   1   1   1 #>   MBON32          1   1   1   1 #>   MBON33          1   1   1   1 #>   MBON34          0   0   1   1 #>   MBON35          1   1   1   1"},{"path":"https://flyconnectome.github.io/coconatfly/articles/getting-started.html","id":"connectivity-clustering","dir":"Articles","previous_headings":"Brain example","what":"Connectivity clustering","title":"1. Getting started with coconatfly","text":"can inspect situation MBON25 MBON34 combined single compound type FlyWire regarded two distinct types hemibrain. Notice pipe %>% dataframe containing metadata cf_cosine_plot function via filter expression picks cell type interest well similarly numbered ones. use output connectivity clustering since suspect downstream cell type interactions diagnostic ","code":"mbonmeta %>%    filter(grepl(\"MBON(25|34|24|26|33|35)\", type)) %>%    cf_cosine_plot(partners = 'out') #> Matching types across datasets. Dropping 929/1703 output partner types with total weight 17648/41972"},{"path":"https://flyconnectome.github.io/coconatfly/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gregory Jefferis. Author, maintainer.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jefferis G (2023). coconatfly: Comparative Connectomics Public Progress Drosophila Datasets. R package version 0.1.0,  https://flyconnectome.github.io/coconatfly/, https://github.com/flyconnectome/coconatfly.","code":"@Manual{,   title = {coconatfly: Comparative Connectomics of Public and In Progress Drosophila Datasets},   author = {Gregory Jefferis},   year = {2023},   note = {R package version 0.1.0,  https://flyconnectome.github.io/coconatfly/},   url = {https://github.com/flyconnectome/coconatfly}, }"},{"path":"https://flyconnectome.github.io/coconatfly/index.html","id":"coconatfly","dir":"","previous_headings":"","what":"Comparative Connectomics of Public and In Progress Drosophila Datasets","title":"Comparative Connectomics of Public and In Progress Drosophila Datasets","text":"coconatfly enables comparative/integrative connectomics across Drosophila datasets. philosophy provide access important functions connectome analysis way convenient uniform across Drosophila datasets. package builds upon coconat package provides basic /dataset agnostic functionality. case wondering, coconat stands COmparative COnnectomics NATverse coconatfly enables specifically fly datasets. Although code already active use, especially comparison hemibrain flywire datasets, remains experimental. Therefore interface yet relied upon. particular, quite likely refactoring abstract functionality coconat time goes order enable core functionality reused.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/index.html","id":"datasets","dir":"","previous_headings":"","what":"Datasets","title":"Comparative Connectomics of Public and In Progress Drosophila Datasets","text":"present following datasets supported (dataset names used package brackets): Janelia hemibrain (hemibrain) Female Adult Fly Brain - FlyWire connectome (flywire) Janelia male Ventral Nerve Cord (manc) Wei Lee, John Tuthill colleagues Female Adult Nerve Cord (fanc) Janelia Male CNS (malecns) first four datasets either public (hemibrain, manc) access can requested subject agreeing certain terms use (flywire, fanc). Male CNS dataset currently early stages proofreading annotation collaboration FlyEM Cambridge Drosophila Connectomics Group. Release anticipated early 2024.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Comparative Connectomics of Public and In Progress Drosophila Datasets","text":"can install development version coconatfly like : datasets exposed coconatfly require authentication access still annotated private pre-release. Please consult individual package dependencies authentication details surprised access datasets time. installation private packages (currently restricted male cns dataset developed collaborators FlyEM Team Janelia) need GITHUB_PAT (Personal Access Token - alternative username+password). code checks PAT GITHUB_PAT offers make one necessary.","code":"install.packages('natmanager') natmanager::install(pkgs = 'coconatfly') natmanager::check_pat()"},{"path":"https://flyconnectome.github.io/coconatfly/index.html","id":"an-example","dir":"","previous_headings":"","what":"An example","title":"Comparative Connectomics of Public and In Progress Drosophila Datasets","text":"First let’s load libraries need Two important functions cf_ids() allows specify set neurons one datasets cf_meta() fetches information cell type. example let’s fetch information DA1 projection neurons: can also multiple brain datasets can also fetch connectivity neurons: Let’s restrict types observed datasets. counting many distinct datasets exist type results. data organised like , can easily compare connection strengths cell types across hemispheres:  … across datasets:","code":"library(coconatfly) library(dplyr) cf_meta(cf_ids('DA1_lPN', datasets = 'hemibrain')) #>           id pre post upstream downstream status    statusLabel     voxels #> 1 1734350788 621 2084     2084       4903 Traced Roughly traced 1174705998 #> 2 1734350908 725 2317     2317       5846 Traced Roughly traced 1382228240 #> 3 1765040289 702 2398     2398       5521 Traced Roughly traced 1380855164 #> 4 5813039315 691 2263     2263       5577 Traced Roughly traced 1016515847 #> 5  722817260 701 2435     2435       5635 Traced Roughly traced 1104413432 #> 6  754534424 646 2364     2364       5309 Traced Roughly traced 1265805547 #> 7  754538881 623 2320     2320       4867 Traced Roughly traced 1217284590 #>   cropped  instance    type cellBodyFiber notes  soma side class group #> 1   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #> 2   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #> 3   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #> 4   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA> FALSE    R  <NA>  <NA> #> 5   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA> FALSE    R  <NA>  <NA> #> 6   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #> 7   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #>     dataset           key #> 1 hemibrain hb:1734350788 #> 2 hemibrain hb:1734350908 #> 3 hemibrain hb:1765040289 #> 4 hemibrain hb:5813039315 #> 5 hemibrain  hb:722817260 #> 6 hemibrain  hb:754534424 #> 7 hemibrain  hb:754538881 da1meta <- cf_meta(cf_ids('DA1_lPN', datasets = c('hemibrain', 'flywire'))) #> Updating 2918 ids #> flywire_rootid_cached: Looking up 2918 missing keys #> Updating 12286 ids #> flywire_rootid_cached: Looking up 12285 missing keys head(da1meta) #>                   id side   class    type group  instance dataset #> 1 720575940604407468    R central DA1_lPN  <NA> DA1_lPN_R flywire #> 2 720575940623543881    R central DA1_lPN  <NA> DA1_lPN_R flywire #> 3 720575940637469254    R central DA1_lPN  <NA> DA1_lPN_R flywire #> 4 720575940614309535    L central DA1_lPN  <NA> DA1_lPN_L flywire #> 5 720575940617229632    R central DA1_lPN  <NA> DA1_lPN_R flywire #> 6 720575940619385765    L central DA1_lPN  <NA> DA1_lPN_L flywire #>                     key #> 1 fw:720575940604407468 #> 2 fw:720575940623543881 #> 3 fw:720575940637469254 #> 4 fw:720575940614309535 #> 5 fw:720575940617229632 #> 6 fw:720575940619385765 da1meta %>%    count(dataset, side) #>     dataset side n #> 1   flywire    L 8 #> 2   flywire    R 7 #> 3 hemibrain    R 7 da1ds <- da1meta %>%    cf_partners(threshold = 5, partners = 'output') head(da1ds) #> # A tibble: 6 × 8 #>    pre_id post_id weight side  type    dataset pre_key               post_key    #>   <int64> <int64>  <int> <chr> <chr>   <chr>   <chr>                 <chr>       #> 1    7e17    7e17     64 L     DA1_vPN flywire fw:720575940605102694 fw:7205759… #> 2    7e17    7e17     50 L     <NA>    flywire fw:720575940603231916 fw:7205759… #> 3    7e17    7e17     49 R     LHAV4a4 flywire fw:720575940604407468 fw:7205759… #> 4    7e17    7e17     48 R     DA1_vPN flywire fw:720575940623303108 fw:7205759… #> 5    7e17    7e17     46 L     v2LN30  flywire fw:720575940603231916 fw:7205759… #> 6    7e17    7e17     42 L     DA1_vPN flywire fw:720575940603231916 fw:7205759… da1ds %>%    group_by(type, dataset, side) %>%    summarise(weight=sum(weight), npre=n_distinct(pre_id), npost=n_distinct(post_id)) #> `summarise()` has grouped output by 'type', 'dataset'. You can override using #> the `.groups` argument. #> # A tibble: 256 × 6 #> # Groups:   type, dataset [209] #>    type            dataset   side  weight  npre npost #>    <chr>           <chr>     <chr>  <int> <int> <int> #>  1 AL-AST1         flywire   L         16     2     1 #>  2 AL-AST1         flywire   R         13     2     1 #>  3 AL-AST1         hemibrain R         25     3     1 #>  4 APL             flywire   L         28     4     1 #>  5 APL             flywire   R         70     6     1 #>  6 APL             hemibrain R        113     6     1 #>  7 AVLP010         flywire   L          6     1     1 #>  8 AVLP010         flywire   R         83     6     1 #>  9 AVLP011,AVLP012 flywire   L          6     1     1 #> 10 AVLP011,AVLP012 flywire   R         22     2     1 #> # ℹ 246 more rows da1ds.shared_types.wide <- da1ds %>%    filter(!(dataset=='hemibrain' & side=='L')) %>% # drop truncated hemibrain LHS    group_by(type) %>%    mutate(datasets_type=n_distinct(dataset)) %>%    filter(datasets_type>1) %>%    group_by(type, dataset, side) %>%    summarise(weight=sum(weight)) %>%    mutate(shortdataset=abbreviate_datasets(dataset)) %>%    tidyr::pivot_wider(id_cols = type, names_from = c(shortdataset,side),                       values_from = weight, values_fill = 0) #> `summarise()` has grouped output by 'type', 'dataset'. You can override using #> the `.groups` argument. da1ds.shared_types.wide #> # A tibble: 38 × 4 #> # Groups:   type [38] #>    type      fw_L  fw_R  hb_R #>    <chr>    <int> <int> <int> #>  1 AL-AST1     16    13    25 #>  2 APL         28    70   113 #>  3 DA1_lPN     45     6    73 #>  4 DA1_vPN    250   254   333 #>  5 DNb05        6     0     5 #>  6 KCg-m     3275  2545  3030 #>  7 LHAD1g1     62    60    48 #>  8 LHAV2a3     70   128   154 #>  9 LHAV2b11    44    77    29 #> 10 LHAV3k6     19    16     5 #> # ℹ 28 more rows library(ggplot2) da1ds.shared_types.wide %>%    filter(type!='KCg-m') %>%    ggplot(data=., aes(fw_L, fw_R)) +   geom_point() +   stat_smooth(method = \"lm\", formula = y ~ x + 0) +   geom_abline(slope=1, linetype='dashed') da1ds.shared_types.wide %>%    filter(type!='KCg-m') %>%    ggplot(data=., aes(fw_R, hb_R)) +   geom_point() +   stat_smooth(method = \"lm\", formula = y ~ x + 0) +   geom_abline(slope=1, linetype='dashed')"},{"path":"https://flyconnectome.github.io/coconatfly/index.html","id":"across-dataset-connectivity-clustering","dir":"","previous_headings":"","what":"Across dataset connectivity clustering","title":"Comparative Connectomics of Public and In Progress Drosophila Datasets","text":"able fetch shared connectivity uniform format building block range analyses. example, can compare connectivity set neurons believed constitute cell type across multiple datasets. Cosine similarity clustering seems work well purpose.  row (column) correspond single neuron. Rows labelled cell type, dataset hemisphere; due truncation hemibrain neurons sometimes exist one hemisphere, sometimes . Notice LAL009 LAL010 neurons hemisphere co-cluster together exactly expect cell type conserved across brains. contrast LAL008 LAL042 intermingled; believe constitute single cell type two cells / hemisphere (.e. split two cell types hemibrain). can also see cells one hemibrain hemisphere often cluster slightly oddly (e.g. 387687146) - likely due truncation axons dendrites cells paucity partners left hand side hemibrain.","code":"cf_cosine_plot(cf_ids('/type:LAL0(08|09|10|42)', datasets = c(\"flywire\", \"hemibrain\"))) #> Updating 2918 ids #> Updating 12286 ids #> Matching types across datasets. Dropping 461/976 output partner types with total weight 8050/23730 #> Matching types across datasets. Dropping 737/1356 input partner types with total weight 10875/26780"},{"path":"https://flyconnectome.github.io/coconatfly/index.html","id":"going-further","dir":"","previous_headings":"","what":"Going further","title":"Comparative Connectomics of Public and In Progress Drosophila Datasets","text":"strongly recommend consulting online manual visible https://natverse.org/coconatfly/. particular vignette(s) listed https://natverse.org/coconatfly/articles provide full code instructions step step walk .","code":""},{"path":"https://flyconnectome.github.io/coconatfly/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Comparative Connectomics of Public and In Progress Drosophila Datasets","text":"Upon publication, please ensure appropriately cite datasets use analysis. addition order justify continued development natverse tools general coconatfly particular, appreciate two citations natverse: Bates et al eLife 2020 coconatfly: Schlegel et al bioRxiv 2023 make significant use natverse packages paper (e.g. multiple panels >1 figure), also strongly appreciate statement like acknowledgements can tracked funders. Development natverse including coconatfly fafbseg packages supported NIH BRAIN Initiative (grant 1RF1MH120679-01), NSF/MRC Neuronex2 (NSF 2014862/MC_EX_MR/T046279/1) core funding Medical Research Council (MC_U105188491).","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/abbreviate_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Abbreviate fly connectomics dataset names — abbreviate_datasets","title":"Abbreviate fly connectomics dataset names — abbreviate_datasets","text":"Abbreviate fly connectomics dataset names","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/abbreviate_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abbreviate fly connectomics dataset names — abbreviate_datasets","text":"","code":"abbreviate_datasets(ds)"},{"path":"https://flyconnectome.github.io/coconatfly/reference/abbreviate_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abbreviate fly connectomics dataset names — abbreviate_datasets","text":"ds One dataset long names","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/abbreviate_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Abbreviate fly connectomics dataset names — abbreviate_datasets","text":"character vector 2 letter abbreviations","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/abbreviate_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Abbreviate fly connectomics dataset names — abbreviate_datasets","text":"","code":"abbreviate_datasets(c(\"flywire\", \"flywire\", \"hemibrain\")) #> [1] \"fw\" \"fw\" \"hb\""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi dataset cosine clustering — multi_connection_table","title":"Multi dataset cosine clustering — multi_connection_table","text":"Multi dataset cosine clustering","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi dataset cosine clustering — multi_connection_table","text":"","code":"multi_connection_table(   ids,   partners = c(\"inputs\", \"outputs\"),   threshold = 1L,   group = \"type\" )  cf_cosine_plot(   ids = NULL,   ...,   threshold = 5,   partners = c(\"outputs\", \"inputs\"),   labRow = \"{type}_{coconatfly::abbreviate_datasets(dataset)}{side}\",   group = \"type\",   heatmap = TRUE,   matrix = FALSE,   interactive = FALSE,   drop_dataset_prefix = FALSE,   nas = c(\"zero\", \"drop\"),   method = c(\"ward.D\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\", \"centroid\",     \"ward.D2\") )"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi dataset cosine clustering — multi_connection_table","text":"ids set across dataset keys neuron ids wrapped cf_ids dataframe compatible keys function. partners Whether return inputs outputs threshold return edges least many matches. 0 option since neuprint sometimes returns 0 weight edges. group name grouping column partner connectivity (defaults \"type\") logical group=FALSE means grouping (see details). ... Additional arguments passed heatmap labRow Optionally, either string can interpolated glue character vector matching number neurons specified ids. See details important limitation second case. heatmap logical indicating whether plot heatmap function plot heatmap whose argument names compatible stats::heatmap. gplots::heatmap.2 good example. Defaults TRUE therefore plotting full heatmap stats::heatmap. matrix Whether return raw cosine matrix (rather heatmap/dendrogram) interactive Whether plot interactive heatmap (allowing zooming id selection). See details. drop_dataset_prefix Whether remove dataset prefix hb: fw: dendrograms. useful reviewing neurons interactive mode. nas entries NAs. Default set 0 similarity. method cluster method use (see hclust)","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi dataset cosine clustering — multi_connection_table","text":"multi_connection_table returns connectivity dataframe   returned cf_partners additional column  partners indicates (row) whether partner neurons   input output neurons. result heatmap invisibly including row   column dendrograms heatmap=FALSE,  hclust dendrogram maxtrix=TRUE cosine   matrix.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multi dataset cosine clustering — multi_connection_table","text":"group=FALSE makes sense single dataset clustering -   type labels essential linking connectivity across datasets. However   group=FALSE can useful e.g. co-clustering columnar elements   visual system closely related partners usually   neighbouring columns. time writing,   metadata support FANC group=FALSE option . group can set metadata columns class   hemilineage, serial (serially homologous cell group)   available. can reveal interesting features organisation. labRow argument conveniently specified length 1   string interpolated glue; happen   context data frame generated cf_meta. One reason   convenient think matching   labels order neurons dendrogram However, need use additional information labels   present cf_meta data need generate   labRow vector. recommended way use   cf_meta fetch metadata neurons   construct additional column preferred label. ensures   entry labRow argument can matched specific   neuron (defined key column metadata data frame). Note try pass user defined labRow character vector   without supplying explicitly ordered set neurons ids   argument get error. cf_cosine_plot   way knowing label corresponds neuron, almost   certainly resulting incorrect row labels dendrogram.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multi dataset cosine clustering — multi_connection_table","text":"","code":"# \\donttest{ # basic cosine clustering, in this case for one dataset cf_cosine_plot(cf_ids(hemibrain=\"/type:LAL00.+\")) #> Matching types across datasets. Dropping 0/748 output partner types with total weight 0/15291 #> Matching types across datasets. Dropping 0/690 input partner types with total weight 0/11078   # same but dropping the dataset prefix in the column labels cf_cosine_plot(cf_ids(hemibrain=\"/type:LAL00.+\"),   drop_dataset_prefix = TRUE) #> Matching types across datasets. Dropping 0/748 output partner types with total weight 0/15291 #> Matching types across datasets. Dropping 0/690 input partner types with total weight 0/11078   # only cluster by inputs cf_cosine_plot(cf_ids(hemibrain=\"/type:LAL00.+\"), partners='in') #> Matching types across datasets. Dropping 0/690 input partner types with total weight 0/11078   # or outputs cf_cosine_plot(cf_ids(hemibrain=\"/type:LAL00.+\"), partners='in') #> Matching types across datasets. Dropping 0/690 input partner types with total weight 0/11078  # the same but without grouping partner connectivity by type # only makes sense for single dataset plots cf_cosine_plot(cf_ids(hemibrain=\"/type:LAL00.+\"), group = FALSE)   ## Using user supplied row labels # e.g. because you have some labels of your own that you want to add library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:nat’: #>  #>     intersect, setdiff, union #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(glue) lalmeta=cf_meta(cf_ids(hemibrain=\"/type:LAL00.+\")) # NB left_join requires the id columns to have the same character data type mytypes=data.frame(   id=as.character(c(5813047453, 1011611587)),   mytype=c(\"alice\", 'bob')) # NB glue::glue functions makes the label using column names lalmeta2=left_join(lalmeta, mytypes, by='id') %>%   mutate(label=glue('{type}_{side} :: {mytype}')) head(lalmeta2) #>           id pre post upstream downstream status    statusLabel     voxels #> 1 5813047453 943 2867     2867       7967 Traced Roughly traced 1709019324 #> 2 1011611587 876 2392     2392       8542 Traced Roughly traced 1502700413 #> 3 5813041304 288  905      905       2089 Traced Roughly traced  695312778 #> 4  894362173 208  469      469       1703 Traced Roughly traced  469303915 #> 5 1572520204 126  474      474        863 Traced Roughly traced  402431356 #> 6 5901201676 120  383      383        832 Traced Roughly traced  360821541 #>   cropped instance   type cellBodyFiber notes soma side class group   dataset #> 1   FALSE LAL001_R LAL001         ADL02  <NA> TRUE    R  <NA>  <NA> hemibrain #> 2   FALSE LAL002_R LAL002         ADL02  <NA> TRUE    R  <NA>  <NA> hemibrain #> 3   FALSE LAL003_R LAL003         ADL06  <NA> TRUE    R  <NA>  <NA> hemibrain #> 4   FALSE LAL004_R LAL004         ADL06  <NA> TRUE    R  <NA>  <NA> hemibrain #> 5   FALSE LAL005_R LAL005         ADL06  <NA> TRUE    R  <NA>  <NA> hemibrain #> 6   FALSE LAL005_R LAL005         ADL06  <NA> TRUE    R  <NA>  <NA> hemibrain #>             key mytype             label #> 1 hb:5813047453  alice LAL001_R :: alice #> 2 hb:1011611587    bob   LAL002_R :: bob #> 3 hb:5813041304   <NA>    LAL003_R :: NA #> 4  hb:894362173   <NA>    LAL004_R :: NA #> 5 hb:1572520204   <NA>    LAL005_R :: NA #> 6 hb:5901201676   <NA>    LAL005_R :: NA  # now use that in the plot # NB with function allows cf_cosine_plot to use dataframe columns directly lalmeta2 %>%  with(cf_cosine_plot(key, labRow=label)) #> Matching types across datasets. Dropping 0/748 output partner types with total weight 0/15291 #> Matching types across datasets. Dropping 0/690 input partner types with total weight 0/11078   # bigger clustering lalhc=cf_cosine_plot(cf_ids(hemibrain=\"/type:LAL.+\"), heatmap=FALSE) #> Matching types across datasets. Dropping 0/17386 output partner types with total weight 0/331470 #> Matching types across datasets. Dropping 0/23297 input partner types with total weight 0/435509 #> Warning: diag(.) had 0 or NA entries; non-finite result is doubtful lalmeta=cf_meta(lalhc$labels) lalmeta=coconat::add_cluster_info(lalmeta, lalhc, h=0.75, idcol='key')  # } if (FALSE) { ## The previous examples are for single datasets to avoid authentication issues ## on the build server, but similar queries could be run for multiple datasets cf_cosine_plot(cf_ids(flywire=\"/type:LAL.+\", malecns=\"/type:LAL.+\"))  cf_cosine_plot(cf_ids(\"/type:LAL.+\", datasets='brain')) # same as since the default is brain cf_cosine_plot(cf_ids(\"/type:LAL.+\"))  # just make the hclust dendrogram lalhc=cf_cosine_plot(cf_ids(\"/type:LAL.+\"), heatmap=FALSE) lalmeta=cf_meta(lalhc$labels) lalmeta=coconat::add_cluster_info(lalmeta, lalhc, h=0.75)  # look at the results interactively cf_cosine_plot(cf_ids(\"/type:LAL.+\"), interactive=TRUE) }  # \\donttest{ # Showcase examples using multi_connection_table to allow # only a subset of partners to be used for typing mct=multi_connection_table(cf_ids(hemibrain=\"/lLN2.+\"), partners='in') #> Matching types across datasets. Dropping 0/63218 input partner types with total weight 0/412813 cf_cosine_plot(mct)  library(dplyr) mct2=mct %>% filter(!grepl(\"PN\",type)) cf_cosine_plot(mct2)   mct3=cf_ids(\"/type:lLN2.+\", datasets=c(\"hemibrain\", \"flywire\")) %>%   multi_connection_table(., partners='in') %>%   mutate(class=case_when(    grepl(\"LN\", type) ~ \"LN\",    grepl(\"RN\", type) ~ \"RN\",    grepl(\"^M.*PN\", type) ~ 'mPN',    grepl(\"PN\", type) ~ 'uPN',    TRUE ~ 'other'   )) %>%   # try merging connectivity for partners that don't have much specificity   mutate(type=case_when(   class==\"RN\" ~ sub(\"_.+\", \"\", type),   class==\"uPN\" ~ 'uPN',   TRUE ~ type   )) #> Loading required namespace: git2r #> Matching types across datasets. Dropping 24365/107368 input partner types with total weight 234195/838394 if (FALSE) { mct3%>%   # remove RN/uPN connectivity could also use the merged connectivity   filter(!class %in% c(\"RN\", \"uPN\")) %>%   cf_cosine_plot(interactive=TRUE) }  # This time focus in on a small number of query neurons mct3 %>%   mutate(query_key=ifelse(partners=='outputs', pre_key, post_key)) %>%   filter(query_key %in% cf_ids('/type:lLN2(T_[bde]|X08)',     datasets = c(\"hemibrain\", \"flywire\"), keys = TRUE)) %>%   cf_cosine_plot()  # }  # another worked example lLN1 neurons # \\donttest{ lLN1=cf_ids(\"/type:lLN1_.+\", datasets=c(\"hemibrain\", \"flywire\")) %>%   multi_connection_table(., partners='in') %>%   mutate(class=case_when(    grepl(\"LN\", type) ~ \"LN\",    grepl(\"RN\", type) ~ \"RN\",    grepl(\"^M.*PN\", type) ~ 'mPN',    grepl(\"PN\", type) ~ 'uPN',    TRUE ~ 'other'   )) %>%   mutate(type=case_when(   class==\"RN\" ~ sub(\"_.+\", \"\", type),   class==\"uPN\" ~ 'uPN',   TRUE ~ type   )) #> Matching types across datasets. Dropping 7237/17265 input partner types with total weight 124784/234441  lLN1 %>%   filter(!class %in% c(\"RN\", \"uPN\")) %>%   cf_cosine_plot()  # }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify ids for fly connectome datasets — cf_ids","title":"Specify ids for fly connectome datasets — cf_ids","text":"Specify ids fly connectome datasets","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify ids for fly connectome datasets — cf_ids","text":"","code":"cf_ids(   query = NULL,   datasets = c(\"brain\", \"vnc\", \"hemibrain\", \"flywire\", \"malecns\", \"manc\", \"fanc\"),   expand = FALSE,   keys = FALSE,   hemibrain = NULL,   flywire = NULL,   malecns = NULL,   manc = NULL,   fanc = NULL )  # S3 method for cidlist c(..., unique = TRUE)"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify ids for fly connectome datasets — cf_ids","text":"query query (e.g. cell type name regular expression) datasets Character vector naming datasets query applied. expand Whether expand queries matching ids (involve one calls corresponding servers). Default FALSE. keys Whether turn ids keys hb:12345 right away. Default FALSE may find useful e.g. combining lists neurons (see examples). hemibrain Pass hemibrain specific query ids argument flywire Pass flywire specific query ids argument malecns Pass malecns specific query ids argument manc Pass manc specific query ids argument fanc Pass fanc ids argument (present support metadata queries fanc) ... One lists generated cf_ids joined together unique Whether remove duplicated ids combining cf_id lists c.cidlist","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify ids for fly connectome datasets — cf_ids","text":"list ids additional class cidlist","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify ids for fly connectome datasets — cf_ids","text":"","code":"# \\donttest{ cf_ids(\"DA2_lPN\", datasets='brain') #> flywire [1 ids]: DA2_lPN #> hemibrain [1 ids]: DA2_lPN #> malecns [1 ids]: DA2_lPN # / introduces a regular expression cf_ids(\"/MBON.+\", datasets='brain') #> flywire [1 ids]: /MBON.+ #> hemibrain [1 ids]: /MBON.+ #> malecns [1 ids]: /MBON.+  # expand query into actual ids cf_ids(\"/type:MBON.+\", datasets='brain', expand=TRUE) #> Error in clio_auth() :  #>   Clio/Google auth failure. Do you have access rights to VNC clio? #> Try specifying the email linked to clio in a call to `clio_auth` or setting `options(malevnc.clio_email)`! #> Warning: Trouble choosing default malecns dataset. #> Try running dr_malecns() and then ask on #code or file an issue at #> https://github.com/flyconnectome/malecns/issues #> Warning: No valid ids in dataset:malecns #> flywire [96 ids]: 720575940624185095 720575940624117245 720575940638526278 720575940629585602 720575940637934308 720575940632118343 720575940609959637 720575940638163428 720575940630496374 720575940642142861 ... #> hemibrain [71 ids]: 612371421 673509195 424789697 5813022341 487925037 612738462 487925063 613079053 1386512867 799586652 ... #> malecns [0 ids]:   # return keys directly cf_ids(\"/type:MBON.+\", keys=TRUE) #> Warning: No valid ids in dataset:malecns #>   [1] \"fw:720575940624185095\" \"fw:720575940624117245\" \"fw:720575940638526278\" #>   [4] \"fw:720575940629585602\" \"fw:720575940637934308\" \"fw:720575940632118343\" #>   [7] \"fw:720575940609959637\" \"fw:720575940638163428\" \"fw:720575940630496374\" #>  [10] \"fw:720575940642142861\" \"fw:720575940611344078\" \"fw:720575940634822751\" #>  [13] \"fw:720575940617552340\" \"fw:720575940624280328\" \"fw:720575940617567206\" #>  [16] \"fw:720575940643700640\" \"fw:720575940615221811\" \"fw:720575940614026193\" #>  [19] \"fw:720575940633209647\" \"fw:720575940623001480\" \"fw:720575940608304220\" #>  [22] \"fw:720575940614595218\" \"fw:720575940636992368\" \"fw:720575940621828443\" #>  [25] \"fw:720575940637902938\" \"fw:720575940638774606\" \"fw:720575940639697827\" #>  [28] \"fw:720575940626833021\" \"fw:720575940618008859\" \"fw:720575940635841143\" #>  [31] \"fw:720575940618249797\" \"fw:720575940629856515\" \"fw:720575940623905719\" #>  [34] \"fw:720575940629529722\" \"fw:720575940624659943\" \"fw:720575940624590316\" #>  [37] \"fw:720575940645304430\" \"fw:720575940612196850\" \"fw:720575940630767959\" #>  [40] \"fw:720575940635082347\" \"fw:720575940628757547\" \"fw:720575940627144069\" #>  [43] \"fw:720575940610647416\" \"fw:720575940622093436\" \"fw:720575940624696810\" #>  [46] \"fw:720575940629422086\" \"fw:720575940647328900\" \"fw:720575940650386553\" #>  [49] \"fw:720575940639556467\" \"fw:720575940612455338\" \"fw:720575940617749538\" #>  [52] \"fw:720575940617760257\" \"fw:720575940619810389\" \"fw:720575940634482783\" #>  [55] \"fw:720575940644615716\" \"fw:720575940626109315\" \"fw:720575940623377802\" #>  [58] \"fw:720575940626744921\" \"fw:720575940623464316\" \"fw:720575940622979277\" #>  [61] \"fw:720575940614892182\" \"fw:720575940620715224\" \"fw:720575940643863496\" #>  [64] \"fw:720575940621777391\" \"fw:720575940606953858\" \"fw:720575940630075703\" #>  [67] \"fw:720575940652390134\" \"fw:720575940632535756\" \"fw:720575940643696288\" #>  [70] \"fw:720575940623201833\" \"fw:720575940635063135\" \"fw:720575940616463477\" #>  [73] \"fw:720575940629981440\" \"fw:720575940623182847\" \"fw:720575940626315010\" #>  [76] \"fw:720575940632943277\" \"fw:720575940624539284\" \"fw:720575940620464321\" #>  [79] \"fw:720575940628783363\" \"fw:720575940643309197\" \"fw:720575940614392999\" #>  [82] \"fw:720575940617302365\" \"fw:720575940622997453\" \"fw:720575940624694503\" #>  [85] \"fw:720575940628734376\" \"fw:720575940610964946\" \"fw:720575940607155890\" #>  [88] \"fw:720575940623381956\" \"fw:720575940630864847\" \"fw:720575940638028607\" #>  [91] \"fw:720575940621164720\" \"fw:720575940623841463\" \"fw:720575940631177803\" #>  [94] \"fw:720575940624489964\" \"fw:720575940616398303\" \"fw:720575940623750325\" #>  [97] \"hb:612371421\"          \"hb:673509195\"          \"hb:424789697\"          #> [100] \"hb:5813022341\"         \"hb:487925037\"          \"hb:612738462\"          #> [103] \"hb:487925063\"          \"hb:613079053\"          \"hb:1386512867\"         #> [106] \"hb:799586652\"          \"hb:422725634\"          \"hb:5813061512\"         #> [109] \"hb:1234386037\"         \"hb:611477605\"          \"hb:733036127\"          #> [112] \"hb:920470959\"          \"hb:1016835041\"         \"hb:1048215779\"         #> [115] \"hb:1078693835\"         \"hb:613719036\"          \"hb:672352543\"          #> [118] \"hb:768555687\"          \"hb:424767514\"          \"hb:517518166\"          #> [121] \"hb:704466265\"          \"hb:861665641\"          \"hb:1139667240\"         #> [124] \"hb:300972942\"          \"hb:394225044\"          \"hb:5813067721\"         #> [127] \"hb:5813068729\"         \"hb:642664141\"          \"hb:673702721\"          #> [130] \"hb:457175171\"          \"hb:579916831\"          \"hb:673366098\"          #> [133] \"hb:5812981264\"         \"hb:5812981543\"         \"hb:457196444\"          #> [136] \"hb:5813020828\"         \"hb:423774471\"          \"hb:517854468\"          #> [139] \"hb:792368888\"          \"hb:5813022896\"         \"hb:985813153\"          #> [142] \"hb:5813042659\"         \"hb:985131499\"          \"hb:423382015\"          #> [145] \"hb:487143497\"          \"hb:550081497\"          \"hb:612742248\"          #> [148] \"hb:612422902\"          \"hb:912951014\"          \"hb:895441451\"          #> [151] \"hb:5813061538\"         \"hb:5813117385\"         \"hb:457196643\"          #> [154] \"hb:5813058048\"         \"hb:5813052909\"         \"hb:5813022234\"         #> [157] \"hb:5813040205\"         \"hb:706948318\"          \"hb:894020730\"          #> [160] \"hb:642732835\"          \"hb:643847447\"          \"hb:518670779\"          #> [163] \"hb:547552266\"          \"hb:1173814525\"         \"hb:5813033000\"         #> [166] \"hb:518930199\"          \"hb:611089775\"          # one way of combining separate lists of neurons hbids=c(264083994, 5813022274) c(cf_ids(\"/type:MBON1.+\", keys=TRUE), cf_ids(hemibrain = hbids, keys = TRUE)) #> Warning: No valid ids in dataset:malecns #>  [1] \"fw:720575940629585602\" \"fw:720575940632118343\" \"fw:720575940642142861\" #>  [4] \"fw:720575940634822751\" \"fw:720575940615221811\" \"fw:720575940614026193\" #>  [7] \"fw:720575940633209647\" \"fw:720575940623001480\" \"fw:720575940608304220\" #> [10] \"fw:720575940621828443\" \"fw:720575940638774606\" \"fw:720575940639697827\" #> [13] \"fw:720575940626833021\" \"fw:720575940635841143\" \"fw:720575940623905719\" #> [16] \"fw:720575940629529722\" \"fw:720575940645304430\" \"fw:720575940612196850\" #> [19] \"fw:720575940630767959\" \"fw:720575940635082347\" \"fw:720575940628757547\" #> [22] \"fw:720575940610647416\" \"fw:720575940622093436\" \"fw:720575940624696810\" #> [25] \"fw:720575940647328900\" \"fw:720575940650386553\" \"fw:720575940639556467\" #> [28] \"fw:720575940612455338\" \"fw:720575940617749538\" \"fw:720575940617760257\" #> [31] \"fw:720575940634482783\" \"fw:720575940626109315\" \"fw:720575940623377802\" #> [34] \"fw:720575940626744921\" \"fw:720575940630075703\" \"fw:720575940632535756\" #> [37] \"fw:720575940643696288\" \"fw:720575940623201833\" \"fw:720575940626315010\" #> [40] \"fw:720575940624539284\" \"fw:720575940622997453\" \"fw:720575940623841463\" #> [43] \"hb:613719036\"          \"hb:672352543\"          \"hb:768555687\"          #> [46] \"hb:424767514\"          \"hb:517518166\"          \"hb:704466265\"          #> [49] \"hb:861665641\"          \"hb:1139667240\"         \"hb:300972942\"          #> [52] \"hb:394225044\"          \"hb:5813067721\"         \"hb:5813068729\"         #> [55] \"hb:642664141\"          \"hb:673702721\"          \"hb:457175171\"          #> [58] \"hb:579916831\"          \"hb:673366098\"          \"hb:5812981264\"         #> [61] \"hb:5812981543\"         \"hb:457196444\"          \"hb:5813020828\"         #> [64] \"hb:423774471\"          \"hb:517854468\"          \"hb:264083994\"          #> [67] \"hb:5813022274\"          # now equivalent to keys(c(cf_ids(\"/type:MBON1.+\"), cf_ids(hemibrain = hbids))) #> Warning: No valid ids in dataset:malecns #>  [1] \"fw:720575940629585602\" \"fw:720575940632118343\" \"fw:720575940642142861\" #>  [4] \"fw:720575940634822751\" \"fw:720575940615221811\" \"fw:720575940614026193\" #>  [7] \"fw:720575940633209647\" \"fw:720575940623001480\" \"fw:720575940608304220\" #> [10] \"fw:720575940621828443\" \"fw:720575940638774606\" \"fw:720575940639697827\" #> [13] \"fw:720575940626833021\" \"fw:720575940635841143\" \"fw:720575940623905719\" #> [16] \"fw:720575940629529722\" \"fw:720575940645304430\" \"fw:720575940612196850\" #> [19] \"fw:720575940630767959\" \"fw:720575940635082347\" \"fw:720575940628757547\" #> [22] \"fw:720575940610647416\" \"fw:720575940622093436\" \"fw:720575940624696810\" #> [25] \"fw:720575940647328900\" \"fw:720575940650386553\" \"fw:720575940639556467\" #> [28] \"fw:720575940612455338\" \"fw:720575940617749538\" \"fw:720575940617760257\" #> [31] \"fw:720575940634482783\" \"fw:720575940626109315\" \"fw:720575940623377802\" #> [34] \"fw:720575940626744921\" \"fw:720575940630075703\" \"fw:720575940632535756\" #> [37] \"fw:720575940643696288\" \"fw:720575940623201833\" \"fw:720575940626315010\" #> [40] \"fw:720575940624539284\" \"fw:720575940622997453\" \"fw:720575940623841463\" #> [43] \"hb:613719036\"          \"hb:672352543\"          \"hb:768555687\"          #> [46] \"hb:424767514\"          \"hb:517518166\"          \"hb:704466265\"          #> [49] \"hb:861665641\"          \"hb:1139667240\"         \"hb:300972942\"          #> [52] \"hb:394225044\"          \"hb:5813067721\"         \"hb:5813068729\"         #> [55] \"hb:642664141\"          \"hb:673702721\"          \"hb:457175171\"          #> [58] \"hb:579916831\"          \"hb:673366098\"          \"hb:5812981264\"         #> [61] \"hb:5812981543\"         \"hb:457196444\"          \"hb:5813020828\"         #> [64] \"hb:423774471\"          \"hb:517854468\"          \"hb:264083994\"          #> [67] \"hb:5813022274\"         # } c(cf_ids(flywire = 1, hemibrain = 2), cf_ids(hemibrain = 1:2, flywire=1:2)) #> flywire [2 ids]: 1 2 #> hemibrain [2 ids]: 2 1 c(cf_ids(flywire = 1, hemibrain = 2), cf_ids(hemibrain = 1:2, flywire=1:2), unique=FALSE) #> flywire [3 ids]: 1 1 2 #> hemibrain [3 ids]: 2 1 2 # \\donttest{ c(cf_ids(flywire = 1, hemibrain = 2), cf_ids(hemibrain = '/SMP55[0-9]', flywire=1:2)) #> flywire [2 ids]: 1 2 #> hemibrain [19 ids]: 2 452689494 579700707 328274638 392757094 605166418 298262663 361114148 669670654 613394707 ... # }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch metadata for neurons from connectome datasets — cf_meta","title":"Fetch metadata for neurons from connectome datasets — cf_meta","text":"Fetch metadata neurons connectome datasets","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch metadata for neurons from connectome datasets — cf_meta","text":"","code":"cf_meta(   ids,   bind.rows = TRUE,   integer64 = FALSE,   MoreArgs = list(flywire = list(type = c(\"cell_type\", \"hemibrain_type\"))) )"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch metadata for neurons from connectome datasets — cf_meta","text":"ids list ids named relevant datasets (see examples) bind.rows Whether bind data.frames dataset together, keeping common columns (default TRUE convenience note columns dropped). integer64 Whether ids character vectors (default) 64 bit ints (compact little fragile rely bit64 extension package.) MoreArgs named list arguments passed fetching metadata   given function. See details. flywire_type metadata column use flytable info table","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_meta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch metadata for neurons from connectome datasets — cf_meta","text":"MoreArgs list named standard dataset names   (e.g. returned cf_datasets.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch metadata for neurons from connectome datasets — cf_meta","text":"","code":"# \\donttest{ da2meta=cf_meta(cf_ids(hemibrain='DA2_lPN')) da2meta #>           id pre post upstream downstream status    statusLabel    voxels #> 1 1796817841 396  509      509       3275 Traced Roughly traced 726508881 #> 2 1796818119 511  818      818       4111 Traced Roughly traced 917547898 #> 3 1797505019 345  476      476       2932 Traced Roughly traced 450568345 #> 4 1827516355 391  548      548       3263 Traced Roughly traced 741928779 #> 5  818983130 409  562      562       3400 Traced Roughly traced 612641685 #>   cropped  instance    type cellBodyFiber notes  soma side class group #> 1   FALSE DA2_lPN_R DA2_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #> 2   FALSE DA2_lPN_R DA2_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #> 3   FALSE DA2_lPN_R DA2_lPN         AVM02  <NA> FALSE    R  <NA>  <NA> #> 4   FALSE DA2_lPN_R DA2_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #> 5   FALSE DA2_lPN_R DA2_lPN         AVM02  <NA> FALSE    R  <NA>  <NA> #>     dataset           key #> 1 hemibrain hb:1796817841 #> 2 hemibrain hb:1796818119 #> 3 hemibrain hb:1797505019 #> 4 hemibrain hb:1827516355 #> 5 hemibrain  hb:818983130 # / introduces a regular expression mbonmeta=cf_meta(cf_ids(hemibrain='/MBON.+')) # }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partner_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise the connectivity of a set of neurons grouping by type — cf_partner_summary","title":"Summarise the connectivity of a set of neurons grouping by type — cf_partner_summary","text":"Summarise connectivity set neurons grouping type","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partner_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise the connectivity of a set of neurons grouping by type — cf_partner_summary","text":"","code":"cf_partner_summary(   ids,   threshold = 1L,   partners = c(\"inputs\", \"outputs\"),   rval = c(\"data.frame\", \"sparse\", \"matrix\") )"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partner_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise the connectivity of a set of neurons grouping by type — cf_partner_summary","text":"ids list ids named relevant datasets (see examples) threshold return edges least many matches. 0 option since neuprint sometimes returns 0 weight edges. partners Whether return inputs outputs rval Choose function return. sparse matrix return sparse dense (standard) matrices, respectively.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partner_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise the connectivity of a set of neurons grouping by type — cf_partner_summary","text":"data.frame (sparse) matrix based rval. column  n refers number partner neurons.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partner_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarise the connectivity of a set of neurons grouping by type — cf_partner_summary","text":"function currently groups dataset, pre postsynaptic type. currently group side. forms returning matrices rely coconat::partner_summary2adjacency_matrix.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partner_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise the connectivity of a set of neurons grouping by type — cf_partner_summary","text":"","code":"if (FALSE) { lal78in=cf_partner_summary(cf_ids(\"/type:LAL00[78]\"), threshold=10, partners='in') lal78in lal78in %>%   tidyr::pivot_wider(id_cols = c(type.pre,dataset),     names_from = type.post, values_from = weight, values_fill = 0) lal78in %>%   tidyr::pivot_wider(id_cols = c(type.pre),     names_from = c(type.post,dataset), values_from = weight, values_fill = 0) }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partners.html","id":null,"dir":"Reference","previous_headings":"","what":"Flexible function for fetching partner data across datasets — cf_partners","title":"Flexible function for fetching partner data across datasets — cf_partners","text":"Flexible function fetching partner data across datasets","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partners.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flexible function for fetching partner data across datasets — cf_partners","text":"","code":"cf_partners(   ids,   threshold = 1L,   partners = c(\"inputs\", \"outputs\"),   bind.rows = TRUE )"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partners.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flexible function for fetching partner data across datasets — cf_partners","text":"ids list ids named relevant datasets (see examples) threshold return edges least many matches. 0 option since neuprint sometimes returns 0 weight edges. partners Whether return inputs outputs bind.rows Whether bind data.frames dataset together, keeping common columns (default TRUE convenience note columns dropped).","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partners.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flexible function for fetching partner data across datasets — cf_partners","text":"data.frame named list (bind.rows=FALSE)","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partners.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flexible function for fetching partner data across datasets — cf_partners","text":"","code":"# \\donttest{ da2ds=cf_partners(list(hemibrain='DA2_lPN'), threshold=5) library(dplyr) da2ds %>%   count(type, wt=weight, sort=TRUE) #>            type   n #> 1       ORN_DA2 667 #> 2       DA2_lPN  89 #> 3         lLN10  85 #> 4         lLN2S  85 #> 5        v2LN30  72 #> 6       LHPV4b3  56 #> 7       lLN2T_a  48 #> 8       lLN2P_c  46 #> 9        l2LN18  23 #> 10 hb1795799176  22 #> 11 hb1859224229  16 #> 12      LHCENT3  14 #> 13 hb1828530446  14 #> 14          APL  12 #> 15 hb1828194121  12 #> 16      lLN2T_d  12 #> 17      lLN2T_e  11 #> 18      LHPD5c1  10 #> 19 hb1827852654  10 #> 20 hb1859224808  10 #> 21       lLN1_b  10 #> 22 hb1828189572   9 #> 23 hb1859220700   9 #> 24 hb1796813596   7 #> 25     LHPV12a1   6 #> 26 hb1890268815   6 #> 27 hb1921298843   6 #> 28          CSD   5 #> 29    LHPV2b5_a   5 #> 30 hb1920258429   5 #> 31 hb1921307609   5 #> 32       lLN12A   5 #> 33       lLN1_c   5 # } if (FALSE) { cf_partners(list(flywire='DA2_lPN'))  DA2_lPN=cf_partners(list(flywire='DA2_lPN', malecns='DA2_lPN')) }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/coconatfly-package.html","id":null,"dir":"Reference","previous_headings":"","what":"coconatfly: Comparative Connectomics of Public and In Progress Drosophila Datasets — coconatfly-package","title":"coconatfly: Comparative Connectomics of Public and In Progress Drosophila Datasets — coconatfly-package","text":"Experimental package enable comparative connectomics analysis multiple Drosophila connectomics datasets, including private ones still development.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/coconatfly/reference/coconatfly-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"coconatfly: Comparative Connectomics of Public and In Progress Drosophila Datasets — coconatfly-package","text":"Maintainer: Gregory Jefferis jefferis@gmail.com (ORCID)","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Interconvert between keys and ids/datasets — keys","title":"Interconvert between keys and ids/datasets — keys","text":"Neurons within dataset identified numeric ids may unique across datasets. Therefore make unique datatset use keys form \"<dataset>:<id>\". keys2df produces data.frame columns   id dataset describing ids dataset.   ordering data.frame match order keys input   vector. keys2list converts character vector keys list ids one list element dataset","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interconvert between keys and ids/datasets — keys","text":"","code":"keys(x, idcol = \"id\")  keys2df(keys, integer64 = FALSE)  keys2list(keys, integer64 = FALSE)"},{"path":"https://flyconnectome.github.io/coconatfly/reference/keys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interconvert between keys and ids/datasets — keys","text":"x list dataframe specifying within dataset ids dataset names. idcol optional string naming column containing ids keys character vector keys integer64 Whether output ids character vectors (default) integer64","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/keys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interconvert between keys and ids/datasets — keys","text":"keys character vector keys form  \"<dataset>:<id>\".","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/coconatfly/reference/keys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interconvert between keys and ids/datasets — keys","text":"","code":"# \\donttest{ keys(cf_ids(hemibrain=12345, flywire='4611686018427387904')) #> [1] \"fw:4611686018427387904\" \"hb:12345\"               # } # \\donttest{  # }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://flyconnectome.github.io/coconatfly/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"Cosine cluster across hemibrain flywire","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"","code":"triple_cosine_plot(   x,   fwtype = x,   version = NULL,   ...,   threshold = 5,   partners = c(\"outputs\", \"inputs\"),   labRow = \"{type}_{abbreviate_datasets(dataset)}{side}\",   group = \"type\",   heatmap = TRUE,   interactive = FALSE,   nas = c(\"zero\", \"drop\"),   method = c(\"ward.D\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\", \"centroid\",     \"ward.D2\") )"},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"x Hemibrain ids dataframe generated triple_connection_table fwtype Optional flywire ids interpreted flywire_ids function version Connectome data dump version. See flywire_connectome_data_version details. ... Additional arguments heatmap threshold Minimum connection weight included finding partners partners Whether use output input partners clustering. Default now uses . labRow character vector defining labels rows resultant heatmap group column use grouping partners. heatmap logical indicating whether plot heatmap function plot heatmap whose argument names compatible stats::heatmap. gplots::heatmap.2 good example. interactive TRUE returns shiny-based interactive heatmap nas rows/columns NAs computing cosine matrix. Dropping may mathematically satisfactory eliminates neurons comparison, default set NA elements 0 similarity. method clustering method. See hclust details.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"list returned heatmap","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"Note bilateral neurons may work better use either   input partners output partners .","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"","code":"# \\donttest{ # AOTU063 should be separated into two subtypes. # Very clear based on output clustering and also some small morphological differences. triple_cosine_plot('AOTU063', partners = 'o') #> Error in add_celltype_info(res, idcol = partner_col, version = version): Expect either character or integer64 ids!  # LAL074/LAL084 are the same type. # Were incorrectly split due to annotation into separate hemibrain CBFs # note that the compound type 'LAL074,LAL084' will be used to find flywire # neurons but expanded to the regex \"(LAL074|LAL084)\" in order to find # both hemibrain types triple_cosine_plot('LAL074,LAL084', partners = 'i') #> Matching types across datasets. Dropping 419/1184 input partner types with total weight 6741/25886  # }"}]
